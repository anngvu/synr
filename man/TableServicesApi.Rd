% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table_services_api.R
\docType{class}
\name{TableServicesApi}
\alias{TableServicesApi}
\title{TableServices operations}
\format{
An \code{R6Class} generator object
}
\description{
TableServicesApi
}
\details{
Synapse REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ getRepoV1Column } \emph{  }

\itemize{
\item \emph{ @param } prefix character
\item \emph{ @param } limit numeric
\item \emph{ @param } offset numeric
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTablePaginatedColumnModels} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTablePaginatedColumnModels
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ColumnColumnId } \emph{  }

\itemize{
\item \emph{ @param } column_id character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableColumnModel} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTableColumnModel
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ColumnTableviewDefaults } \emph{  }

\itemize{
\item \emph{ @param } view_entity_type \link{OrgSagebionetworksRepoModelTableViewEntityType}
\item \emph{ @param } view_type_mask numeric
\item \emph{ @returnType } \link{ListWrapperOfColumnModel} \cr


\item status code : 200 | -

\item return type : ListWrapperOfColumnModel
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ColumnViewScopeAsyncGetAsyncToken } \emph{  }

\itemize{
\item \emph{ @param } async_token character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableViewColumnModelResponse} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTableViewColumnModelResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1EntityIdColumn } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTablePaginatedColumnModels} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTablePaginatedColumnModels
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } column_id character
\item \emph{ @param } row_id numeric
\item \emph{ @param } version_number numeric
\item \emph{ @param } redirect character
\item \emph{ @returnType } \link{AnyType} \cr


\item status code : 200 | Status 200 will be returned if the 'redirect' boolean param is false

\item return type : AnyType
\item response headers :

\tabular{ll}{
}
\item status code : 307 | Status 307 will be returned if the 'redirect' boolean param is true or null


\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } column_id character
\item \emph{ @param } row_id numeric
\item \emph{ @param } version_number numeric
\item \emph{ @param } redirect character
\item \emph{ @returnType } \link{AnyType} \cr


\item status code : 200 | Status 200 will be returned if the 'redirect' boolean param is false

\item return type : AnyType
\item response headers :

\tabular{ll}{
}
\item status code : 307 | Status 307 will be returned if the 'redirect' boolean param is true or null


\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } async_token character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableDownloadFromTableResult} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTableDownloadFromTableResult
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1EntityIdTableQueryAsyncGetAsyncToken } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } async_token character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableQueryResultBundle} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTableQueryResultBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1EntityIdTableTransactionAsyncGetAsyncToken } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } async_token character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableTableUpdateTransactionResponse} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTableTableUpdateTransactionResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } async_token character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableUploadToTableResult} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTableUploadToTableResult
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken } \emph{  }

\itemize{
\item \emph{ @param } async_token character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableUploadToTablePreviewResult} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTableUploadToTablePreviewResult
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1Column } \emph{  }

\itemize{
\item \emph{ @param } org_sagebionetworks_repo_model_table_column_model \link{OrgSagebionetworksRepoModelTableColumnModel}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableColumnModel} \cr


\item status code : 201 | -

\item return type : OrgSagebionetworksRepoModelTableColumnModel
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1ColumnBatch } \emph{  }

\itemize{
\item \emph{ @param } list_wrapper_of_column_model \link{ListWrapperOfColumnModel}
\item \emph{ @returnType } \link{ListWrapperOfColumnModel} \cr


\item status code : 201 | -

\item return type : ListWrapperOfColumnModel
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1ColumnViewScopeAsyncStart } \emph{  }

\itemize{
\item \emph{ @param } org_sagebionetworks_repo_model_table_view_column_model_request \link{OrgSagebionetworksRepoModelTableViewColumnModelRequest}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelAsynchAsyncJobId} \cr


\item status code : 201 | An object containing the id of the asynchronous job whose results can be fetched using the   ,<a href=\"${GET.column.view.scope.async.get.asyncToken}\">,GET /column/view/scope/async/get,</a>, service

\item return type : OrgSagebionetworksRepoModelAsynchAsyncJobId
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1EntityIdTableDownloadCsvAsyncStart } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } org_sagebionetworks_repo_model_table_download_from_table_request \link{OrgSagebionetworksRepoModelTableDownloadFromTableRequest}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelAsynchAsyncJobId} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelAsynchAsyncJobId
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1EntityIdTableFilehandles } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } org_sagebionetworks_repo_model_table_row_reference_set \link{OrgSagebionetworksRepoModelTableRowReferenceSet}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableTableFileHandleResults} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTableTableFileHandleResults
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1EntityIdTableQueryAsyncStart } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } org_sagebionetworks_repo_model_table_query_bundle_request \link{OrgSagebionetworksRepoModelTableQueryBundleRequest}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelAsynchAsyncJobId} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelAsynchAsyncJobId
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1EntityIdTableSnapshot } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } org_sagebionetworks_repo_model_table_snapshot_request \link{OrgSagebionetworksRepoModelTableSnapshotRequest}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableSnapshotResponse} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTableSnapshotResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1EntityIdTableTransactionAsyncStart } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } org_sagebionetworks_repo_model_table_table_update_transaction_request \link{OrgSagebionetworksRepoModelTableTableUpdateTransactionRequest}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelAsynchAsyncJobId} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelAsynchAsyncJobId
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1EntityIdTableUploadCsvAsyncStart } \emph{  }

\itemize{
\item \emph{ @param } id character
\item \emph{ @param } org_sagebionetworks_repo_model_table_upload_to_table_request \link{OrgSagebionetworksRepoModelTableUploadToTableRequest}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelAsynchAsyncJobId} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelAsynchAsyncJobId
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1TableUploadCsvPreviewAsyncStart } \emph{  }

\itemize{
\item \emph{ @param } org_sagebionetworks_repo_model_table_upload_to_table_preview_request \link{OrgSagebionetworksRepoModelTableUploadToTablePreviewRequest}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelAsynchAsyncJobId} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelAsynchAsyncJobId
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1ValidateDefiningSql } \emph{  }

\itemize{
\item \emph{ @param } org_sagebionetworks_repo_model_table_validate_defining_sql_request \link{OrgSagebionetworksRepoModelTableValidateDefiningSqlRequest}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelTableValidateDefiningSqlResponse} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelTableValidateDefiningSqlResponse
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  getRepoV1Column  ####################

library(synr)
var_prefix <- "prefix_example" # character | When included, only columns with a name that starts with this             prefix will be returned. (Optional)
var_limit <- 3.4 # numeric | Limits the size of the page returned. For example, a page size             of 10 require limit = 10. The maximum Limit for this call is             100. The default Limit is 10; (Optional)
var_offset <- 3.4 # numeric | The index of the pagination offset. For a page size of 10, the             first page would be at offset = 0, and the second page would             be at offset = 10. (Optional)

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1Column(prefix = var_prefix, limit = var_limit, offset = var_offsetdata_file = "result.txt")
result <- api_instance$getRepoV1Column(prefix = var_prefix, limit = var_limit, offset = var_offset)
dput(result)


####################  getRepoV1ColumnColumnId  ####################

library(synr)
var_column_id <- "column_id_example" # character | The ID of the ColumnModel to get.

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ColumnColumnId(var_column_iddata_file = "result.txt")
result <- api_instance$getRepoV1ColumnColumnId(var_column_id)
dput(result)


####################  getRepoV1ColumnTableviewDefaults  ####################

library(synr)
var_view_entity_type <- org.sagebionetworks.repo.model.table.ViewEntityType$new() # OrgSagebionetworksRepoModelTableViewEntityType | The ,<a href=\"${org.sagebionetworks.repo.model.table.ViewEntityType}\">,entity                        type,</a>, of the view, if omitted use entityview (Optional)
var_view_type_mask <- 3.4 # numeric | Bit mask representing the types to include in the view.                        Not required for a submission view. For an entity view                        following are the possible types: (type=,<mask_hex>,):                        File=0x01, Project=0x02, Table=0x04, Folder=0x08,                        View=0x10, Docker=0x20, SubmissionView=0x40, Dataset=0x80,                         DatasetCollection=0x100, MaterializedView=0x200). (Optional)

api_instance <- TableServicesApi$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ColumnTableviewDefaults(view_entity_type = var_view_entity_type, view_type_mask = var_view_type_maskdata_file = "result.txt")
result <- api_instance$getRepoV1ColumnTableviewDefaults(view_entity_type = var_view_entity_type, view_type_mask = var_view_type_mask)
dput(result)


####################  getRepoV1ColumnViewScopeAsyncGetAsyncToken  ####################

library(synr)
var_async_token <- "async_token_example" # character | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ColumnViewScopeAsyncGetAsyncToken(var_async_tokendata_file = "result.txt")
result <- api_instance$getRepoV1ColumnViewScopeAsyncGetAsyncToken(var_async_token)
dput(result)


####################  getRepoV1EntityIdColumn  ####################

library(synr)
var_id <- "id_example" # character | The ID of the TableEntity to get the ColumnModels for.

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1EntityIdColumn(var_iddata_file = "result.txt")
result <- api_instance$getRepoV1EntityIdColumn(var_id)
dput(result)


####################  getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile  ####################

library(synr)
var_id <- "id_example" # character | The ID of the FileEntity to get.
var_column_id <- "column_id_example" # character | 
var_row_id <- 3.4 # numeric | 
var_version_number <- 3.4 # numeric | 
var_redirect <- "redirect_example" # character | When set to false, the URL will be returned as text/plain             instead of redirecting. (Optional)

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile(var_id, var_column_id, var_row_id, var_version_number, redirect = var_redirectdata_file = "result.txt")
result <- api_instance$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile(var_id, var_column_id, var_row_id, var_version_number, redirect = var_redirect)
dput(result)


####################  getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview  ####################

library(synr)
var_id <- "id_example" # character | The ID of the FileEntity to get.
var_column_id <- "column_id_example" # character | 
var_row_id <- 3.4 # numeric | 
var_version_number <- 3.4 # numeric | 
var_redirect <- "redirect_example" # character | When set to false, the URL will be returned as text/plain             instead of redirecting. (Optional)

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview(var_id, var_column_id, var_row_id, var_version_number, redirect = var_redirectdata_file = "result.txt")
result <- api_instance$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview(var_id, var_column_id, var_row_id, var_version_number, redirect = var_redirect)
dput(result)


####################  getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken  ####################

library(synr)
var_id <- "id_example" # character | The ID of the TableEntity.
var_async_token <- "async_token_example" # character | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken(var_id, var_async_tokendata_file = "result.txt")
result <- api_instance$getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken(var_id, var_async_token)
dput(result)


####################  getRepoV1EntityIdTableQueryAsyncGetAsyncToken  ####################

library(synr)
var_id <- "id_example" # character | The ID of the TableEntity.
var_async_token <- "async_token_example" # character | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1EntityIdTableQueryAsyncGetAsyncToken(var_id, var_async_tokendata_file = "result.txt")
result <- api_instance$getRepoV1EntityIdTableQueryAsyncGetAsyncToken(var_id, var_async_token)
dput(result)


####################  getRepoV1EntityIdTableTransactionAsyncGetAsyncToken  ####################

library(synr)
var_id <- "id_example" # character | The ID of the table entity.
var_async_token <- "async_token_example" # character | The token returned when the job was started.

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1EntityIdTableTransactionAsyncGetAsyncToken(var_id, var_async_tokendata_file = "result.txt")
result <- api_instance$getRepoV1EntityIdTableTransactionAsyncGetAsyncToken(var_id, var_async_token)
dput(result)


####################  getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken  ####################

library(synr)
var_id <- "id_example" # character | The ID of the TableEntity.
var_async_token <- "async_token_example" # character | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken(var_id, var_async_tokendata_file = "result.txt")
result <- api_instance$getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken(var_id, var_async_token)
dput(result)


####################  getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken  ####################

library(synr)
var_async_token <- "async_token_example" # character | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken(var_async_tokendata_file = "result.txt")
result <- api_instance$getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken(var_async_token)
dput(result)


####################  postRepoV1Column  ####################

library(synr)
var_org_sagebionetworks_repo_model_table_column_model <- org.sagebionetworks.repo.model.table.ColumnModel$new("name_example", "columnType_example", "facetType_example", "id_example", "defaultValue_example", 123, 123, c("enumValues_example"), c(org.sagebionetworks.repo.model.table.JsonSubColumnModel$new("name_example", "columnType_example", "facetType_example", "jsonPath_example"))) # OrgSagebionetworksRepoModelTableColumnModel | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1Column(var_org_sagebionetworks_repo_model_table_column_modeldata_file = "result.txt")
result <- api_instance$postRepoV1Column(var_org_sagebionetworks_repo_model_table_column_model)
dput(result)


####################  postRepoV1ColumnBatch  ####################

library(synr)
var_list_wrapper_of_column_model <- ListWrapperOfColumnModel$new(c(org.sagebionetworks.repo.model.table.ColumnModel$new("name_example", "columnType_example", "facetType_example", "id_example", "defaultValue_example", 123, 123, c("enumValues_example"), c(org.sagebionetworks.repo.model.table.JsonSubColumnModel$new("name_example", "columnType_example", "facetType_example", "jsonPath_example"))))) # ListWrapperOfColumnModel | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1ColumnBatch(var_list_wrapper_of_column_modeldata_file = "result.txt")
result <- api_instance$postRepoV1ColumnBatch(var_list_wrapper_of_column_model)
dput(result)


####################  postRepoV1ColumnViewScopeAsyncStart  ####################

library(synr)
var_org_sagebionetworks_repo_model_table_view_column_model_request <- org.sagebionetworks.repo.model.table.ViewColumnModelRequest$new("org.sagebionetworks.repo.model.table.ViewColumnModelRequest", org.sagebionetworks.repo.model.table.ViewScope$new(123, c("scope_example"), "viewEntityType_example", "viewType_example"), "includeDerivedAnnotations_example", "nextPageToken_example") # OrgSagebionetworksRepoModelTableViewColumnModelRequest | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1ColumnViewScopeAsyncStart(var_org_sagebionetworks_repo_model_table_view_column_model_requestdata_file = "result.txt")
result <- api_instance$postRepoV1ColumnViewScopeAsyncStart(var_org_sagebionetworks_repo_model_table_view_column_model_request)
dput(result)


####################  postRepoV1EntityIdTableDownloadCsvAsyncStart  ####################

library(synr)
var_id <- "id_example" # character | The ID of the TableEntity.
var_org_sagebionetworks_repo_model_table_download_from_table_request <- org.sagebionetworks.repo.model.table.DownloadFromTableRequest$new("org.sagebionetworks.repo.model.table.DownloadFromTableRequest", "entityId_example", "writeHeader_example", "includeRowIdAndRowVersion_example", org.sagebionetworks.repo.model.table.CsvTableDescriptor$new("separator_example", "quoteCharacter_example", "escapeCharacter_example", "lineEnd_example", "isFirstLineHeader_example"), "fileName_example", "sql_example", c(org.sagebionetworks.repo.model.table.QueryFilter$new("concreteType_example", "isDefiningCondition_example", c("values_example"), "columnName_example", "function_example", "operator_example", "searchExpression_example")), c(org.sagebionetworks.repo.model.table.FacetColumnRequest$new("concreteType_example", "columnName_example", "jsonPath_example", c("facetValues_example"), "min_example", "max_example")), "includeEntityEtag_example", 123, 123, 123, c(org.sagebionetworks.repo.model.table.SortItem$new("column_example", "direction_example"))) # OrgSagebionetworksRepoModelTableDownloadFromTableRequest | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1EntityIdTableDownloadCsvAsyncStart(var_id, var_org_sagebionetworks_repo_model_table_download_from_table_requestdata_file = "result.txt")
result <- api_instance$postRepoV1EntityIdTableDownloadCsvAsyncStart(var_id, var_org_sagebionetworks_repo_model_table_download_from_table_request)
dput(result)


####################  postRepoV1EntityIdTableFilehandles  ####################

library(synr)
var_id <- "id_example" # character | The ID of the TableEntity to append rows to.
var_org_sagebionetworks_repo_model_table_row_reference_set <- org.sagebionetworks.repo.model.table.RowReferenceSet$new("tableId_example", "etag_example", c(org.sagebionetworks.repo.model.table.SelectColumn$new("name_example", "columnType_example", "id_example")), c(org.sagebionetworks.repo.model.table.RowReference$new(123, 123))) # OrgSagebionetworksRepoModelTableRowReferenceSet | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1EntityIdTableFilehandles(var_id, var_org_sagebionetworks_repo_model_table_row_reference_setdata_file = "result.txt")
result <- api_instance$postRepoV1EntityIdTableFilehandles(var_id, var_org_sagebionetworks_repo_model_table_row_reference_set)
dput(result)


####################  postRepoV1EntityIdTableQueryAsyncStart  ####################

library(synr)
var_id <- "id_example" # character | The ID of the TableEntity.
var_org_sagebionetworks_repo_model_table_query_bundle_request <- org.sagebionetworks.repo.model.table.QueryBundleRequest$new("org.sagebionetworks.repo.model.table.QueryBundleRequest", "entityId_example", org.sagebionetworks.repo.model.table.Query$new("sql_example", c(org.sagebionetworks.repo.model.table.QueryFilter$new("concreteType_example", "isDefiningCondition_example", c("values_example"), "columnName_example", "function_example", "operator_example", "searchExpression_example")), c(org.sagebionetworks.repo.model.table.FacetColumnRequest$new("concreteType_example", "columnName_example", "jsonPath_example", c("facetValues_example"), "min_example", "max_example")), "includeEntityEtag_example", 123, 123, 123, c(org.sagebionetworks.repo.model.table.SortItem$new("column_example", "direction_example"))), 123) # OrgSagebionetworksRepoModelTableQueryBundleRequest | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1EntityIdTableQueryAsyncStart(var_id, var_org_sagebionetworks_repo_model_table_query_bundle_requestdata_file = "result.txt")
result <- api_instance$postRepoV1EntityIdTableQueryAsyncStart(var_id, var_org_sagebionetworks_repo_model_table_query_bundle_request)
dput(result)


####################  postRepoV1EntityIdTableSnapshot  ####################

library(synr)
var_id <- "id_example" # character | 
var_org_sagebionetworks_repo_model_table_snapshot_request <- org.sagebionetworks.repo.model.table.SnapshotRequest$new("snapshotComment_example", "snapshotLabel_example", "snapshotActivityId_example") # OrgSagebionetworksRepoModelTableSnapshotRequest | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1EntityIdTableSnapshot(var_id, var_org_sagebionetworks_repo_model_table_snapshot_requestdata_file = "result.txt")
result <- api_instance$postRepoV1EntityIdTableSnapshot(var_id, var_org_sagebionetworks_repo_model_table_snapshot_request)
dput(result)


####################  postRepoV1EntityIdTableTransactionAsyncStart  ####################

library(synr)
var_id <- "id_example" # character | The ID of the TableEntity to update.
var_org_sagebionetworks_repo_model_table_table_update_transaction_request <- org.sagebionetworks.repo.model.table.TableUpdateTransactionRequest$new("org.sagebionetworks.repo.model.table.TableUpdateTransactionRequest", "entityId_example", c(org.sagebionetworks.repo.model.table.TableUpdateRequest$new("concreteType_example", "entityId_example", "searchEnabled_example", org.sagebionetworks.repo.model.table.AppendableRowSet$new("concreteType_example", "tableId_example", c(org.sagebionetworks.repo.model.table.Row$new(123, 123, "etag_example", c("values_example"))), "etag_example", c(org.sagebionetworks.repo.model.table.SelectColumn$new("name_example", "columnType_example", "id_example"))), "tableId_example", "uploadFileHandleId_example", "updateEtag_example", 123, org.sagebionetworks.repo.model.table.CsvTableDescriptor$new("separator_example", "quoteCharacter_example", "escapeCharacter_example", "lineEnd_example", "isFirstLineHeader_example"), c("columnIds_example"), c(org.sagebionetworks.repo.model.table.ColumnChange$new("oldColumnId_example", "newColumnId_example")), c("orderedColumnIds_example"))), "createSnapshot_example", org.sagebionetworks.repo.model.table.SnapshotRequest$new("snapshotComment_example", "snapshotLabel_example", "snapshotActivityId_example")) # OrgSagebionetworksRepoModelTableTableUpdateTransactionRequest | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1EntityIdTableTransactionAsyncStart(var_id, var_org_sagebionetworks_repo_model_table_table_update_transaction_requestdata_file = "result.txt")
result <- api_instance$postRepoV1EntityIdTableTransactionAsyncStart(var_id, var_org_sagebionetworks_repo_model_table_table_update_transaction_request)
dput(result)


####################  postRepoV1EntityIdTableUploadCsvAsyncStart  ####################

library(synr)
var_id <- "id_example" # character | The ID of the TableEntity.
var_org_sagebionetworks_repo_model_table_upload_to_table_request <- org.sagebionetworks.repo.model.table.UploadToTableRequest$new("org.sagebionetworks.repo.model.table.UploadToTableRequest", "entityId_example", "tableId_example", "uploadFileHandleId_example", "updateEtag_example", 123, org.sagebionetworks.repo.model.table.CsvTableDescriptor$new("separator_example", "quoteCharacter_example", "escapeCharacter_example", "lineEnd_example", "isFirstLineHeader_example"), c("columnIds_example")) # OrgSagebionetworksRepoModelTableUploadToTableRequest | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1EntityIdTableUploadCsvAsyncStart(var_id, var_org_sagebionetworks_repo_model_table_upload_to_table_requestdata_file = "result.txt")
result <- api_instance$postRepoV1EntityIdTableUploadCsvAsyncStart(var_id, var_org_sagebionetworks_repo_model_table_upload_to_table_request)
dput(result)


####################  postRepoV1TableUploadCsvPreviewAsyncStart  ####################

library(synr)
var_org_sagebionetworks_repo_model_table_upload_to_table_preview_request <- org.sagebionetworks.repo.model.table.UploadToTablePreviewRequest$new("org.sagebionetworks.repo.model.table.UploadToTablePreviewRequest", "uploadFileHandleId_example", 123, org.sagebionetworks.repo.model.table.CsvTableDescriptor$new("separator_example", "quoteCharacter_example", "escapeCharacter_example", "lineEnd_example", "isFirstLineHeader_example"), "doFullFileScan_example") # OrgSagebionetworksRepoModelTableUploadToTablePreviewRequest | 

api_instance <- TableServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1TableUploadCsvPreviewAsyncStart(var_org_sagebionetworks_repo_model_table_upload_to_table_preview_requestdata_file = "result.txt")
result <- api_instance$postRepoV1TableUploadCsvPreviewAsyncStart(var_org_sagebionetworks_repo_model_table_upload_to_table_preview_request)
dput(result)


####################  postRepoV1ValidateDefiningSql  ####################

library(synr)
var_org_sagebionetworks_repo_model_table_validate_defining_sql_request <- org.sagebionetworks.repo.model.table.ValidateDefiningSqlRequest$new("definingSql_example", "entityType_example") # OrgSagebionetworksRepoModelTableValidateDefiningSqlRequest | 

api_instance <- TableServicesApi$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1ValidateDefiningSql(var_org_sagebionetworks_repo_model_table_validate_defining_sql_requestdata_file = "result.txt")
result <- api_instance$postRepoV1ValidateDefiningSql(var_org_sagebionetworks_repo_model_table_validate_defining_sql_request)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TableServicesApi-new}{\code{TableServicesApi$new()}}
\item \href{#method-TableServicesApi-getRepoV1Column}{\code{TableServicesApi$getRepoV1Column()}}
\item \href{#method-TableServicesApi-getRepoV1ColumnWithHttpInfo}{\code{TableServicesApi$getRepoV1ColumnWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1ColumnColumnId}{\code{TableServicesApi$getRepoV1ColumnColumnId()}}
\item \href{#method-TableServicesApi-getRepoV1ColumnColumnIdWithHttpInfo}{\code{TableServicesApi$getRepoV1ColumnColumnIdWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1ColumnTableviewDefaults}{\code{TableServicesApi$getRepoV1ColumnTableviewDefaults()}}
\item \href{#method-TableServicesApi-getRepoV1ColumnTableviewDefaultsWithHttpInfo}{\code{TableServicesApi$getRepoV1ColumnTableviewDefaultsWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1ColumnViewScopeAsyncGetAsyncToken}{\code{TableServicesApi$getRepoV1ColumnViewScopeAsyncGetAsyncToken()}}
\item \href{#method-TableServicesApi-getRepoV1ColumnViewScopeAsyncGetAsyncTokenWithHttpInfo}{\code{TableServicesApi$getRepoV1ColumnViewScopeAsyncGetAsyncTokenWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdColumn}{\code{TableServicesApi$getRepoV1EntityIdColumn()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdColumnWithHttpInfo}{\code{TableServicesApi$getRepoV1EntityIdColumnWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile}{\code{TableServicesApi$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFileWithHttpInfo}{\code{TableServicesApi$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFileWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview}{\code{TableServicesApi$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreviewWithHttpInfo}{\code{TableServicesApi$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreviewWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken}{\code{TableServicesApi$getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncTokenWithHttpInfo}{\code{TableServicesApi$getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncTokenWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableQueryAsyncGetAsyncToken}{\code{TableServicesApi$getRepoV1EntityIdTableQueryAsyncGetAsyncToken()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableQueryAsyncGetAsyncTokenWithHttpInfo}{\code{TableServicesApi$getRepoV1EntityIdTableQueryAsyncGetAsyncTokenWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableTransactionAsyncGetAsyncToken}{\code{TableServicesApi$getRepoV1EntityIdTableTransactionAsyncGetAsyncToken()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableTransactionAsyncGetAsyncTokenWithHttpInfo}{\code{TableServicesApi$getRepoV1EntityIdTableTransactionAsyncGetAsyncTokenWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken}{\code{TableServicesApi$getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken()}}
\item \href{#method-TableServicesApi-getRepoV1EntityIdTableUploadCsvAsyncGetAsyncTokenWithHttpInfo}{\code{TableServicesApi$getRepoV1EntityIdTableUploadCsvAsyncGetAsyncTokenWithHttpInfo()}}
\item \href{#method-TableServicesApi-getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken}{\code{TableServicesApi$getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken()}}
\item \href{#method-TableServicesApi-getRepoV1TableUploadCsvPreviewAsyncGetAsyncTokenWithHttpInfo}{\code{TableServicesApi$getRepoV1TableUploadCsvPreviewAsyncGetAsyncTokenWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1Column}{\code{TableServicesApi$postRepoV1Column()}}
\item \href{#method-TableServicesApi-postRepoV1ColumnWithHttpInfo}{\code{TableServicesApi$postRepoV1ColumnWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1ColumnBatch}{\code{TableServicesApi$postRepoV1ColumnBatch()}}
\item \href{#method-TableServicesApi-postRepoV1ColumnBatchWithHttpInfo}{\code{TableServicesApi$postRepoV1ColumnBatchWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1ColumnViewScopeAsyncStart}{\code{TableServicesApi$postRepoV1ColumnViewScopeAsyncStart()}}
\item \href{#method-TableServicesApi-postRepoV1ColumnViewScopeAsyncStartWithHttpInfo}{\code{TableServicesApi$postRepoV1ColumnViewScopeAsyncStartWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableDownloadCsvAsyncStart}{\code{TableServicesApi$postRepoV1EntityIdTableDownloadCsvAsyncStart()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableDownloadCsvAsyncStartWithHttpInfo}{\code{TableServicesApi$postRepoV1EntityIdTableDownloadCsvAsyncStartWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableFilehandles}{\code{TableServicesApi$postRepoV1EntityIdTableFilehandles()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableFilehandlesWithHttpInfo}{\code{TableServicesApi$postRepoV1EntityIdTableFilehandlesWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableQueryAsyncStart}{\code{TableServicesApi$postRepoV1EntityIdTableQueryAsyncStart()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableQueryAsyncStartWithHttpInfo}{\code{TableServicesApi$postRepoV1EntityIdTableQueryAsyncStartWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableSnapshot}{\code{TableServicesApi$postRepoV1EntityIdTableSnapshot()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableSnapshotWithHttpInfo}{\code{TableServicesApi$postRepoV1EntityIdTableSnapshotWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableTransactionAsyncStart}{\code{TableServicesApi$postRepoV1EntityIdTableTransactionAsyncStart()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableTransactionAsyncStartWithHttpInfo}{\code{TableServicesApi$postRepoV1EntityIdTableTransactionAsyncStartWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableUploadCsvAsyncStart}{\code{TableServicesApi$postRepoV1EntityIdTableUploadCsvAsyncStart()}}
\item \href{#method-TableServicesApi-postRepoV1EntityIdTableUploadCsvAsyncStartWithHttpInfo}{\code{TableServicesApi$postRepoV1EntityIdTableUploadCsvAsyncStartWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1TableUploadCsvPreviewAsyncStart}{\code{TableServicesApi$postRepoV1TableUploadCsvPreviewAsyncStart()}}
\item \href{#method-TableServicesApi-postRepoV1TableUploadCsvPreviewAsyncStartWithHttpInfo}{\code{TableServicesApi$postRepoV1TableUploadCsvPreviewAsyncStartWithHttpInfo()}}
\item \href{#method-TableServicesApi-postRepoV1ValidateDefiningSql}{\code{TableServicesApi$postRepoV1ValidateDefiningSql()}}
\item \href{#method-TableServicesApi-postRepoV1ValidateDefiningSqlWithHttpInfo}{\code{TableServicesApi$postRepoV1ValidateDefiningSqlWithHttpInfo()}}
\item \href{#method-TableServicesApi-clone}{\code{TableServicesApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new TableServicesApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1Column"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1Column}{}}}
\subsection{Method \code{getRepoV1Column()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1Column(
  prefix = NULL,
  limit = NULL,
  offset = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prefix}}{(optional) When included, only columns with a name that starts with this             prefix will be returned.}

\item{\code{limit}}{(optional) Limits the size of the page returned. For example, a page size             of 10 require limit = 10. The maximum Limit for this call is             100. The default Limit is 10;}

\item{\code{offset}}{(optional) The index of the pagination offset. For a page size of 10, the             first page would be at offset = 0, and the second page would             be at offset = 10.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTablePaginatedColumnModels
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1ColumnWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1ColumnWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ColumnWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1ColumnWithHttpInfo(
  prefix = NULL,
  limit = NULL,
  offset = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prefix}}{(optional) When included, only columns with a name that starts with this             prefix will be returned.}

\item{\code{limit}}{(optional) Limits the size of the page returned. For example, a page size             of 10 require limit = 10. The maximum Limit for this call is             100. The default Limit is 10;}

\item{\code{offset}}{(optional) The index of the pagination offset. For a page size of 10, the             first page would be at offset = 0, and the second page would             be at offset = 10.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTablePaginatedColumnModels) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1ColumnColumnId"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1ColumnColumnId}{}}}
\subsection{Method \code{getRepoV1ColumnColumnId()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1ColumnColumnId(column_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{column_id}}{The ID of the ColumnModel to get.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableColumnModel
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1ColumnColumnIdWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1ColumnColumnIdWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ColumnColumnIdWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1ColumnColumnIdWithHttpInfo(
  column_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{column_id}}{The ID of the ColumnModel to get.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableColumnModel) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1ColumnTableviewDefaults"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1ColumnTableviewDefaults}{}}}
\subsection{Method \code{getRepoV1ColumnTableviewDefaults()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1ColumnTableviewDefaults(
  view_entity_type = NULL,
  view_type_mask = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{view_entity_type}}{(optional) The ,<a href=\"${org.sagebionetworks.repo.model.table.ViewEntityType}\">,entity                        type,</a>, of the view, if omitted use entityview}

\item{\code{view_type_mask}}{(optional) Bit mask representing the types to include in the view.                        Not required for a submission view. For an entity view                        following are the possible types: (type=,<mask_hex>,):                        File=0x01, Project=0x02, Table=0x04, Folder=0x08,                        View=0x10, Docker=0x20, SubmissionView=0x40, Dataset=0x80,                         DatasetCollection=0x100, MaterializedView=0x200).}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListWrapperOfColumnModel
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1ColumnTableviewDefaultsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1ColumnTableviewDefaultsWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ColumnTableviewDefaultsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1ColumnTableviewDefaultsWithHttpInfo(
  view_entity_type = NULL,
  view_type_mask = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{view_entity_type}}{(optional) The ,<a href=\"${org.sagebionetworks.repo.model.table.ViewEntityType}\">,entity                        type,</a>, of the view, if omitted use entityview}

\item{\code{view_type_mask}}{(optional) Bit mask representing the types to include in the view.                        Not required for a submission view. For an entity view                        following are the possible types: (type=,<mask_hex>,):                        File=0x01, Project=0x02, Table=0x04, Folder=0x08,                        View=0x10, Docker=0x20, SubmissionView=0x40, Dataset=0x80,                         DatasetCollection=0x100, MaterializedView=0x200).}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListWrapperOfColumnModel) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1ColumnViewScopeAsyncGetAsyncToken"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1ColumnViewScopeAsyncGetAsyncToken}{}}}
\subsection{Method \code{getRepoV1ColumnViewScopeAsyncGetAsyncToken()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1ColumnViewScopeAsyncGetAsyncToken(
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{async_token}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableViewColumnModelResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1ColumnViewScopeAsyncGetAsyncTokenWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1ColumnViewScopeAsyncGetAsyncTokenWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ColumnViewScopeAsyncGetAsyncTokenWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1ColumnViewScopeAsyncGetAsyncTokenWithHttpInfo(
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{async_token}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableViewColumnModelResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdColumn"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdColumn}{}}}
\subsection{Method \code{getRepoV1EntityIdColumn()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdColumn(id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity to get the ColumnModels for.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTablePaginatedColumnModels
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdColumnWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdColumnWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1EntityIdColumnWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdColumnWithHttpInfo(id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity to get the ColumnModels for.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTablePaginatedColumnModels) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile}{}}}
\subsection{Method \code{getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile(
  id,
  column_id,
  row_id,
  version_number,
  redirect = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the FileEntity to get.}

\item{\code{column_id}}{}

\item{\code{row_id}}{}

\item{\code{version_number}}{}

\item{\code{redirect}}{(optional) When set to false, the URL will be returned as text/plain             instead of redirecting.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
AnyType
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFileWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFileWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFileWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFileWithHttpInfo(
  id,
  column_id,
  row_id,
  version_number,
  redirect = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the FileEntity to get.}

\item{\code{column_id}}{}

\item{\code{row_id}}{}

\item{\code{version_number}}{}

\item{\code{redirect}}{(optional) When set to false, the URL will be returned as text/plain             instead of redirecting.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (AnyType) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview}{}}}
\subsection{Method \code{getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview(
  id,
  column_id,
  row_id,
  version_number,
  redirect = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the FileEntity to get.}

\item{\code{column_id}}{}

\item{\code{row_id}}{}

\item{\code{version_number}}{}

\item{\code{redirect}}{(optional) When set to false, the URL will be returned as text/plain             instead of redirecting.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
AnyType
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreviewWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreviewWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreviewWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreviewWithHttpInfo(
  id,
  column_id,
  row_id,
  version_number,
  redirect = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the FileEntity to get.}

\item{\code{column_id}}{}

\item{\code{row_id}}{}

\item{\code{version_number}}{}

\item{\code{redirect}}{(optional) When set to false, the URL will be returned as text/plain             instead of redirecting.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (AnyType) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken}{}}}
\subsection{Method \code{getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken(
  id,
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{async_token}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableDownloadFromTableResult
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncTokenWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncTokenWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncTokenWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncTokenWithHttpInfo(
  id,
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{async_token}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableDownloadFromTableResult) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableQueryAsyncGetAsyncToken"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableQueryAsyncGetAsyncToken}{}}}
\subsection{Method \code{getRepoV1EntityIdTableQueryAsyncGetAsyncToken()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableQueryAsyncGetAsyncToken(
  id,
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{async_token}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableQueryResultBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableQueryAsyncGetAsyncTokenWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableQueryAsyncGetAsyncTokenWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1EntityIdTableQueryAsyncGetAsyncTokenWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableQueryAsyncGetAsyncTokenWithHttpInfo(
  id,
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{async_token}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableQueryResultBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableTransactionAsyncGetAsyncToken"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableTransactionAsyncGetAsyncToken}{}}}
\subsection{Method \code{getRepoV1EntityIdTableTransactionAsyncGetAsyncToken()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableTransactionAsyncGetAsyncToken(
  id,
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the table entity.}

\item{\code{async_token}}{The token returned when the job was started.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableTableUpdateTransactionResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableTransactionAsyncGetAsyncTokenWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableTransactionAsyncGetAsyncTokenWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1EntityIdTableTransactionAsyncGetAsyncTokenWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableTransactionAsyncGetAsyncTokenWithHttpInfo(
  id,
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the table entity.}

\item{\code{async_token}}{The token returned when the job was started.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableTableUpdateTransactionResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken}{}}}
\subsection{Method \code{getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken(
  id,
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{async_token}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableUploadToTableResult
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1EntityIdTableUploadCsvAsyncGetAsyncTokenWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1EntityIdTableUploadCsvAsyncGetAsyncTokenWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1EntityIdTableUploadCsvAsyncGetAsyncTokenWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1EntityIdTableUploadCsvAsyncGetAsyncTokenWithHttpInfo(
  id,
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{async_token}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableUploadToTableResult) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken}{}}}
\subsection{Method \code{getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken(
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{async_token}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableUploadToTablePreviewResult
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-getRepoV1TableUploadCsvPreviewAsyncGetAsyncTokenWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-getRepoV1TableUploadCsvPreviewAsyncGetAsyncTokenWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1TableUploadCsvPreviewAsyncGetAsyncTokenWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$getRepoV1TableUploadCsvPreviewAsyncGetAsyncTokenWithHttpInfo(
  async_token,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{async_token}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableUploadToTablePreviewResult) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1Column"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1Column}{}}}
\subsection{Method \code{postRepoV1Column()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1Column(
  org_sagebionetworks_repo_model_table_column_model,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_table_column_model}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableColumnModel
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1ColumnWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1ColumnWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1ColumnWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1ColumnWithHttpInfo(
  org_sagebionetworks_repo_model_table_column_model,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_table_column_model}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableColumnModel) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1ColumnBatch"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1ColumnBatch}{}}}
\subsection{Method \code{postRepoV1ColumnBatch()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1ColumnBatch(
  list_wrapper_of_column_model,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{list_wrapper_of_column_model}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ListWrapperOfColumnModel
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1ColumnBatchWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1ColumnBatchWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1ColumnBatchWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1ColumnBatchWithHttpInfo(
  list_wrapper_of_column_model,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{list_wrapper_of_column_model}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ListWrapperOfColumnModel) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1ColumnViewScopeAsyncStart"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1ColumnViewScopeAsyncStart}{}}}
\subsection{Method \code{postRepoV1ColumnViewScopeAsyncStart()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1ColumnViewScopeAsyncStart(
  org_sagebionetworks_repo_model_table_view_column_model_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_table_view_column_model_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelAsynchAsyncJobId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1ColumnViewScopeAsyncStartWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1ColumnViewScopeAsyncStartWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1ColumnViewScopeAsyncStartWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1ColumnViewScopeAsyncStartWithHttpInfo(
  org_sagebionetworks_repo_model_table_view_column_model_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_table_view_column_model_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelAsynchAsyncJobId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableDownloadCsvAsyncStart"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableDownloadCsvAsyncStart}{}}}
\subsection{Method \code{postRepoV1EntityIdTableDownloadCsvAsyncStart()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableDownloadCsvAsyncStart(
  id,
  org_sagebionetworks_repo_model_table_download_from_table_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{org_sagebionetworks_repo_model_table_download_from_table_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelAsynchAsyncJobId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableDownloadCsvAsyncStartWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableDownloadCsvAsyncStartWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1EntityIdTableDownloadCsvAsyncStartWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableDownloadCsvAsyncStartWithHttpInfo(
  id,
  org_sagebionetworks_repo_model_table_download_from_table_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{org_sagebionetworks_repo_model_table_download_from_table_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelAsynchAsyncJobId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableFilehandles"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableFilehandles}{}}}
\subsection{Method \code{postRepoV1EntityIdTableFilehandles()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableFilehandles(
  id,
  org_sagebionetworks_repo_model_table_row_reference_set,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity to append rows to.}

\item{\code{org_sagebionetworks_repo_model_table_row_reference_set}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableTableFileHandleResults
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableFilehandlesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableFilehandlesWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1EntityIdTableFilehandlesWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableFilehandlesWithHttpInfo(
  id,
  org_sagebionetworks_repo_model_table_row_reference_set,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity to append rows to.}

\item{\code{org_sagebionetworks_repo_model_table_row_reference_set}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableTableFileHandleResults) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableQueryAsyncStart"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableQueryAsyncStart}{}}}
\subsection{Method \code{postRepoV1EntityIdTableQueryAsyncStart()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableQueryAsyncStart(
  id,
  org_sagebionetworks_repo_model_table_query_bundle_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{org_sagebionetworks_repo_model_table_query_bundle_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelAsynchAsyncJobId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableQueryAsyncStartWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableQueryAsyncStartWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1EntityIdTableQueryAsyncStartWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableQueryAsyncStartWithHttpInfo(
  id,
  org_sagebionetworks_repo_model_table_query_bundle_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{org_sagebionetworks_repo_model_table_query_bundle_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelAsynchAsyncJobId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableSnapshot"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableSnapshot}{}}}
\subsection{Method \code{postRepoV1EntityIdTableSnapshot()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableSnapshot(
  id,
  org_sagebionetworks_repo_model_table_snapshot_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{}

\item{\code{org_sagebionetworks_repo_model_table_snapshot_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableSnapshotResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableSnapshotWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableSnapshotWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1EntityIdTableSnapshotWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableSnapshotWithHttpInfo(
  id,
  org_sagebionetworks_repo_model_table_snapshot_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{}

\item{\code{org_sagebionetworks_repo_model_table_snapshot_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableSnapshotResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableTransactionAsyncStart"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableTransactionAsyncStart}{}}}
\subsection{Method \code{postRepoV1EntityIdTableTransactionAsyncStart()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableTransactionAsyncStart(
  id,
  org_sagebionetworks_repo_model_table_table_update_transaction_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity to update.}

\item{\code{org_sagebionetworks_repo_model_table_table_update_transaction_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelAsynchAsyncJobId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableTransactionAsyncStartWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableTransactionAsyncStartWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1EntityIdTableTransactionAsyncStartWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableTransactionAsyncStartWithHttpInfo(
  id,
  org_sagebionetworks_repo_model_table_table_update_transaction_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity to update.}

\item{\code{org_sagebionetworks_repo_model_table_table_update_transaction_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelAsynchAsyncJobId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableUploadCsvAsyncStart"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableUploadCsvAsyncStart}{}}}
\subsection{Method \code{postRepoV1EntityIdTableUploadCsvAsyncStart()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableUploadCsvAsyncStart(
  id,
  org_sagebionetworks_repo_model_table_upload_to_table_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{org_sagebionetworks_repo_model_table_upload_to_table_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelAsynchAsyncJobId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1EntityIdTableUploadCsvAsyncStartWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1EntityIdTableUploadCsvAsyncStartWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1EntityIdTableUploadCsvAsyncStartWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1EntityIdTableUploadCsvAsyncStartWithHttpInfo(
  id,
  org_sagebionetworks_repo_model_table_upload_to_table_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{The ID of the TableEntity.}

\item{\code{org_sagebionetworks_repo_model_table_upload_to_table_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelAsynchAsyncJobId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1TableUploadCsvPreviewAsyncStart"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1TableUploadCsvPreviewAsyncStart}{}}}
\subsection{Method \code{postRepoV1TableUploadCsvPreviewAsyncStart()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1TableUploadCsvPreviewAsyncStart(
  org_sagebionetworks_repo_model_table_upload_to_table_preview_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_table_upload_to_table_preview_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelAsynchAsyncJobId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1TableUploadCsvPreviewAsyncStartWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1TableUploadCsvPreviewAsyncStartWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1TableUploadCsvPreviewAsyncStartWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1TableUploadCsvPreviewAsyncStartWithHttpInfo(
  org_sagebionetworks_repo_model_table_upload_to_table_preview_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_table_upload_to_table_preview_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelAsynchAsyncJobId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1ValidateDefiningSql"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1ValidateDefiningSql}{}}}
\subsection{Method \code{postRepoV1ValidateDefiningSql()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1ValidateDefiningSql(
  org_sagebionetworks_repo_model_table_validate_defining_sql_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_table_validate_defining_sql_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelTableValidateDefiningSqlResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-postRepoV1ValidateDefiningSqlWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-postRepoV1ValidateDefiningSqlWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1ValidateDefiningSqlWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$postRepoV1ValidateDefiningSqlWithHttpInfo(
  org_sagebionetworks_repo_model_table_validate_defining_sql_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_table_validate_defining_sql_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelTableValidateDefiningSqlResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TableServicesApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TableServicesApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TableServicesApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
