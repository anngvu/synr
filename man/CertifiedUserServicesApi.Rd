% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/certified_user_services_api.R
\docType{class}
\name{CertifiedUserServicesApi}
\alias{CertifiedUserServicesApi}
\title{CertifiedUserServices operations}
\format{
An \code{R6Class} generator object
}
\description{
CertifiedUserServicesApi
}
\details{
Synapse REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ deleteRepoV1AdminCertifiedUserTestResponseId } \emph{  }

\itemize{
\item \emph{ @param } id numeric


\item status code : 200 | Void


\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1AdminCertifiedUserTestResponse } \emph{  }

\itemize{
\item \emph{ @param } principal_id numeric
\item \emph{ @param } limit integer
\item \emph{ @param } offset integer
\item \emph{ @returnType } \link{PaginatedResultsOfQuizResponse} \cr


\item status code : 200 | Auto-generated description

\item return type : PaginatedResultsOfQuizResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1AdminUserIdCertifiedUserPassingRecords } \emph{  }

\itemize{
\item \emph{ @param } id numeric
\item \emph{ @param } limit integer
\item \emph{ @param } offset integer
\item \emph{ @returnType } \link{PaginatedResultsOfPassingRecord} \cr


\item status code : 200 | Auto-generated description

\item return type : PaginatedResultsOfPassingRecord
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1CertifiedUserTest } \emph{  }

\itemize{
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelQuizQuiz} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelQuizQuiz
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1UserIdCertifiedUserPassingRecord } \emph{  }

\itemize{
\item \emph{ @param } id numeric
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelQuizPassingRecord} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelQuizPassingRecord
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1CertifiedUserTestResponse } \emph{  }

\itemize{
\item \emph{ @param } org_sagebionetworks_repo_model_quiz_quiz_response \link{OrgSagebionetworksRepoModelQuizQuizResponse}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelQuizPassingRecord} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelQuizPassingRecord
\item response headers :

\tabular{ll}{
}
}

\strong{ putRepoV1AdminUserIdCertificationStatus } \emph{  }

\itemize{
\item \emph{ @param } id numeric
\item \emph{ @param } is_certified character


\item status code : 204 | Void


\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  deleteRepoV1AdminCertifiedUserTestResponseId  ####################

library(synr)
var_id <- 3.4 # numeric | 

api_instance <- CertifiedUserServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

api_instance$deleteRepoV1AdminCertifiedUserTestResponseId(var_id)


####################  getRepoV1AdminCertifiedUserTestResponse  ####################

library(synr)
var_principal_id <- 3.4 # numeric | If specified, only retrieve the quiz for this user, if it exists. (Optional)
var_limit <- 56 # integer | Limits the size of the page returned. For example, a page size of 10 requires limit = 10. (Optional)
var_offset <- 56 # integer | The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10. (Optional)

api_instance <- CertifiedUserServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1AdminCertifiedUserTestResponse(principal_id = var_principal_id, limit = var_limit, offset = var_offsetdata_file = "result.txt")
result <- api_instance$getRepoV1AdminCertifiedUserTestResponse(principal_id = var_principal_id, limit = var_limit, offset = var_offset)
dput(result)


####################  getRepoV1AdminUserIdCertifiedUserPassingRecords  ####################

library(synr)
var_id <- 3.4 # numeric | 
var_limit <- 56 # integer |  (Optional)
var_offset <- 56 # integer |  (Optional)

api_instance <- CertifiedUserServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1AdminUserIdCertifiedUserPassingRecords(var_id, limit = var_limit, offset = var_offsetdata_file = "result.txt")
result <- api_instance$getRepoV1AdminUserIdCertifiedUserPassingRecords(var_id, limit = var_limit, offset = var_offset)
dput(result)


####################  getRepoV1CertifiedUserTest  ####################

library(synr)

api_instance <- CertifiedUserServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1CertifiedUserTest(data_file = "result.txt")
result <- api_instance$getRepoV1CertifiedUserTest()
dput(result)


####################  getRepoV1UserIdCertifiedUserPassingRecord  ####################

library(synr)
var_id <- 3.4 # numeric | 

api_instance <- CertifiedUserServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1UserIdCertifiedUserPassingRecord(var_iddata_file = "result.txt")
result <- api_instance$getRepoV1UserIdCertifiedUserPassingRecord(var_id)
dput(result)


####################  postRepoV1CertifiedUserTestResponse  ####################

library(synr)
var_org_sagebionetworks_repo_model_quiz_quiz_response <- org.sagebionetworks.repo.model.quiz.QuizResponse$new(123, 123, "createdBy_example", "createdOn_example", c(org.sagebionetworks.repo.model.quiz.QuestionResponse$new("concreteType_example", 123, c(123), "response_example"))) # OrgSagebionetworksRepoModelQuizQuizResponse | 

api_instance <- CertifiedUserServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1CertifiedUserTestResponse(var_org_sagebionetworks_repo_model_quiz_quiz_responsedata_file = "result.txt")
result <- api_instance$postRepoV1CertifiedUserTestResponse(var_org_sagebionetworks_repo_model_quiz_quiz_response)
dput(result)


####################  putRepoV1AdminUserIdCertificationStatus  ####################

library(synr)
var_id <- 3.4 # numeric | 
var_is_certified <- "is_certified_example" # character | true to set as certified or false to 'de-certify'

api_instance <- CertifiedUserServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

api_instance$putRepoV1AdminUserIdCertificationStatus(var_id, var_is_certified)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CertifiedUserServicesApi-new}{\code{CertifiedUserServicesApi$new()}}
\item \href{#method-CertifiedUserServicesApi-deleteRepoV1AdminCertifiedUserTestResponseId}{\code{CertifiedUserServicesApi$deleteRepoV1AdminCertifiedUserTestResponseId()}}
\item \href{#method-CertifiedUserServicesApi-deleteRepoV1AdminCertifiedUserTestResponseIdWithHttpInfo}{\code{CertifiedUserServicesApi$deleteRepoV1AdminCertifiedUserTestResponseIdWithHttpInfo()}}
\item \href{#method-CertifiedUserServicesApi-getRepoV1AdminCertifiedUserTestResponse}{\code{CertifiedUserServicesApi$getRepoV1AdminCertifiedUserTestResponse()}}
\item \href{#method-CertifiedUserServicesApi-getRepoV1AdminCertifiedUserTestResponseWithHttpInfo}{\code{CertifiedUserServicesApi$getRepoV1AdminCertifiedUserTestResponseWithHttpInfo()}}
\item \href{#method-CertifiedUserServicesApi-getRepoV1AdminUserIdCertifiedUserPassingRecords}{\code{CertifiedUserServicesApi$getRepoV1AdminUserIdCertifiedUserPassingRecords()}}
\item \href{#method-CertifiedUserServicesApi-getRepoV1AdminUserIdCertifiedUserPassingRecordsWithHttpInfo}{\code{CertifiedUserServicesApi$getRepoV1AdminUserIdCertifiedUserPassingRecordsWithHttpInfo()}}
\item \href{#method-CertifiedUserServicesApi-getRepoV1CertifiedUserTest}{\code{CertifiedUserServicesApi$getRepoV1CertifiedUserTest()}}
\item \href{#method-CertifiedUserServicesApi-getRepoV1CertifiedUserTestWithHttpInfo}{\code{CertifiedUserServicesApi$getRepoV1CertifiedUserTestWithHttpInfo()}}
\item \href{#method-CertifiedUserServicesApi-getRepoV1UserIdCertifiedUserPassingRecord}{\code{CertifiedUserServicesApi$getRepoV1UserIdCertifiedUserPassingRecord()}}
\item \href{#method-CertifiedUserServicesApi-getRepoV1UserIdCertifiedUserPassingRecordWithHttpInfo}{\code{CertifiedUserServicesApi$getRepoV1UserIdCertifiedUserPassingRecordWithHttpInfo()}}
\item \href{#method-CertifiedUserServicesApi-postRepoV1CertifiedUserTestResponse}{\code{CertifiedUserServicesApi$postRepoV1CertifiedUserTestResponse()}}
\item \href{#method-CertifiedUserServicesApi-postRepoV1CertifiedUserTestResponseWithHttpInfo}{\code{CertifiedUserServicesApi$postRepoV1CertifiedUserTestResponseWithHttpInfo()}}
\item \href{#method-CertifiedUserServicesApi-putRepoV1AdminUserIdCertificationStatus}{\code{CertifiedUserServicesApi$putRepoV1AdminUserIdCertificationStatus()}}
\item \href{#method-CertifiedUserServicesApi-putRepoV1AdminUserIdCertificationStatusWithHttpInfo}{\code{CertifiedUserServicesApi$putRepoV1AdminUserIdCertificationStatusWithHttpInfo()}}
\item \href{#method-CertifiedUserServicesApi-clone}{\code{CertifiedUserServicesApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new CertifiedUserServicesApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-deleteRepoV1AdminCertifiedUserTestResponseId"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-deleteRepoV1AdminCertifiedUserTestResponseId}{}}}
\subsection{Method \code{deleteRepoV1AdminCertifiedUserTestResponseId()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$deleteRepoV1AdminCertifiedUserTestResponseId(id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-deleteRepoV1AdminCertifiedUserTestResponseIdWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-deleteRepoV1AdminCertifiedUserTestResponseIdWithHttpInfo}{}}}
\subsection{Method \code{deleteRepoV1AdminCertifiedUserTestResponseIdWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$deleteRepoV1AdminCertifiedUserTestResponseIdWithHttpInfo(
  id,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-getRepoV1AdminCertifiedUserTestResponse"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-getRepoV1AdminCertifiedUserTestResponse}{}}}
\subsection{Method \code{getRepoV1AdminCertifiedUserTestResponse()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$getRepoV1AdminCertifiedUserTestResponse(
  principal_id = NULL,
  limit = NULL,
  offset = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{principal_id}}{(optional) If specified, only retrieve the quiz for this user, if it exists.}

\item{\code{limit}}{(optional) Limits the size of the page returned. For example, a page size of 10 requires limit = 10.}

\item{\code{offset}}{(optional) The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResultsOfQuizResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-getRepoV1AdminCertifiedUserTestResponseWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-getRepoV1AdminCertifiedUserTestResponseWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1AdminCertifiedUserTestResponseWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$getRepoV1AdminCertifiedUserTestResponseWithHttpInfo(
  principal_id = NULL,
  limit = NULL,
  offset = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{principal_id}}{(optional) If specified, only retrieve the quiz for this user, if it exists.}

\item{\code{limit}}{(optional) Limits the size of the page returned. For example, a page size of 10 requires limit = 10.}

\item{\code{offset}}{(optional) The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResultsOfQuizResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-getRepoV1AdminUserIdCertifiedUserPassingRecords"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-getRepoV1AdminUserIdCertifiedUserPassingRecords}{}}}
\subsection{Method \code{getRepoV1AdminUserIdCertifiedUserPassingRecords()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$getRepoV1AdminUserIdCertifiedUserPassingRecords(
  id,
  limit = NULL,
  offset = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{}

\item{\code{limit}}{(optional) No description}

\item{\code{offset}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResultsOfPassingRecord
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-getRepoV1AdminUserIdCertifiedUserPassingRecordsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-getRepoV1AdminUserIdCertifiedUserPassingRecordsWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1AdminUserIdCertifiedUserPassingRecordsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$getRepoV1AdminUserIdCertifiedUserPassingRecordsWithHttpInfo(
  id,
  limit = NULL,
  offset = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{}

\item{\code{limit}}{(optional) No description}

\item{\code{offset}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResultsOfPassingRecord) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-getRepoV1CertifiedUserTest"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-getRepoV1CertifiedUserTest}{}}}
\subsection{Method \code{getRepoV1CertifiedUserTest()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$getRepoV1CertifiedUserTest(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelQuizQuiz
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-getRepoV1CertifiedUserTestWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-getRepoV1CertifiedUserTestWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1CertifiedUserTestWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$getRepoV1CertifiedUserTestWithHttpInfo(
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelQuizQuiz) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-getRepoV1UserIdCertifiedUserPassingRecord"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-getRepoV1UserIdCertifiedUserPassingRecord}{}}}
\subsection{Method \code{getRepoV1UserIdCertifiedUserPassingRecord()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$getRepoV1UserIdCertifiedUserPassingRecord(
  id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelQuizPassingRecord
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-getRepoV1UserIdCertifiedUserPassingRecordWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-getRepoV1UserIdCertifiedUserPassingRecordWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1UserIdCertifiedUserPassingRecordWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$getRepoV1UserIdCertifiedUserPassingRecordWithHttpInfo(
  id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelQuizPassingRecord) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-postRepoV1CertifiedUserTestResponse"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-postRepoV1CertifiedUserTestResponse}{}}}
\subsection{Method \code{postRepoV1CertifiedUserTestResponse()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$postRepoV1CertifiedUserTestResponse(
  org_sagebionetworks_repo_model_quiz_quiz_response,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_quiz_quiz_response}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelQuizPassingRecord
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-postRepoV1CertifiedUserTestResponseWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-postRepoV1CertifiedUserTestResponseWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1CertifiedUserTestResponseWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$postRepoV1CertifiedUserTestResponseWithHttpInfo(
  org_sagebionetworks_repo_model_quiz_quiz_response,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_quiz_quiz_response}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelQuizPassingRecord) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-putRepoV1AdminUserIdCertificationStatus"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-putRepoV1AdminUserIdCertificationStatus}{}}}
\subsection{Method \code{putRepoV1AdminUserIdCertificationStatus()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$putRepoV1AdminUserIdCertificationStatus(
  id,
  is_certified,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{}

\item{\code{is_certified}}{true to set as certified or false to 'de-certify'}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-putRepoV1AdminUserIdCertificationStatusWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-putRepoV1AdminUserIdCertificationStatusWithHttpInfo}{}}}
\subsection{Method \code{putRepoV1AdminUserIdCertificationStatusWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$putRepoV1AdminUserIdCertificationStatusWithHttpInfo(
  id,
  is_certified,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{}

\item{\code{is_certified}}{true to set as certified or false to 'de-certify'}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CertifiedUserServicesApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CertifiedUserServicesApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CertifiedUserServicesApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
