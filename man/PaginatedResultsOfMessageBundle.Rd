% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paginated_results_of_message_bundle.R
\docType{class}
\name{PaginatedResultsOfMessageBundle}
\alias{PaginatedResultsOfMessageBundle}
\title{PaginatedResultsOfMessageBundle}
\format{
An \code{R6Class} generator object
}
\description{
PaginatedResultsOfMessageBundle Class

PaginatedResultsOfMessageBundle Class
}
\details{
Create a new PaginatedResultsOfMessageBundle
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{totalNumberOfResults}}{integer [optional]}

\item{\code{results}}{list(\link{OrgSagebionetworksRepoModelMessageMessageBundle}) [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PaginatedResultsOfMessageBundle-new}{\code{PaginatedResultsOfMessageBundle$new()}}
\item \href{#method-PaginatedResultsOfMessageBundle-toJSON}{\code{PaginatedResultsOfMessageBundle$toJSON()}}
\item \href{#method-PaginatedResultsOfMessageBundle-fromJSON}{\code{PaginatedResultsOfMessageBundle$fromJSON()}}
\item \href{#method-PaginatedResultsOfMessageBundle-toJSONString}{\code{PaginatedResultsOfMessageBundle$toJSONString()}}
\item \href{#method-PaginatedResultsOfMessageBundle-fromJSONString}{\code{PaginatedResultsOfMessageBundle$fromJSONString()}}
\item \href{#method-PaginatedResultsOfMessageBundle-validateJSON}{\code{PaginatedResultsOfMessageBundle$validateJSON()}}
\item \href{#method-PaginatedResultsOfMessageBundle-toString}{\code{PaginatedResultsOfMessageBundle$toString()}}
\item \href{#method-PaginatedResultsOfMessageBundle-isValid}{\code{PaginatedResultsOfMessageBundle$isValid()}}
\item \href{#method-PaginatedResultsOfMessageBundle-getInvalidFields}{\code{PaginatedResultsOfMessageBundle$getInvalidFields()}}
\item \href{#method-PaginatedResultsOfMessageBundle-print}{\code{PaginatedResultsOfMessageBundle$print()}}
\item \href{#method-PaginatedResultsOfMessageBundle-clone}{\code{PaginatedResultsOfMessageBundle$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-new"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new PaginatedResultsOfMessageBundle class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$new(
  totalNumberOfResults = NULL,
  results = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{totalNumberOfResults}}{totalNumberOfResults}

\item{\code{results}}{results}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
PaginatedResultsOfMessageBundle in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of PaginatedResultsOfMessageBundle
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of PaginatedResultsOfMessageBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
PaginatedResultsOfMessageBundle in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of PaginatedResultsOfMessageBundle
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of PaginatedResultsOfMessageBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to PaginatedResultsOfMessageBundle and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-toString"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of PaginatedResultsOfMessageBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-print"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PaginatedResultsOfMessageBundle-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PaginatedResultsOfMessageBundle-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PaginatedResultsOfMessageBundle$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
