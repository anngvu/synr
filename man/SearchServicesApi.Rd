% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search_services_api.R
\docType{class}
\name{SearchServicesApi}
\alias{SearchServicesApi}
\title{SearchServices operations}
\format{
An \code{R6Class} generator object
}
\description{
SearchServicesApi
}
\details{
Synapse REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ postRepoV1Search } \emph{  }

\itemize{
\item \emph{ @param } org_sagebionetworks_repo_model_search_query_search_query \link{OrgSagebionetworksRepoModelSearchQuerySearchQuery}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelSearchSearchResults} \cr


\item status code : 201 | search results from CloudSearch

\item return type : OrgSagebionetworksRepoModelSearchSearchResults
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  postRepoV1Search  ####################

library(synr)
var_org_sagebionetworks_repo_model_search_query_search_query <- org.sagebionetworks.repo.model.search.query.SearchQuery$new(c("queryTerm_example"), c(org.sagebionetworks.repo.model.search.query.KeyValue$new("key_example", "value_example", "not_example")), c(org.sagebionetworks.repo.model.search.query.KeyRange$new("key_example", "min_example", "max_example")), c(org.sagebionetworks.repo.model.search.query.SearchFacetOption$new("name_example", 123, "sortType_example")), c("returnFields_example"), 123, 123) # OrgSagebionetworksRepoModelSearchQuerySearchQuery | 

api_instance <- SearchServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1Search(var_org_sagebionetworks_repo_model_search_query_search_querydata_file = "result.txt")
result <- api_instance$postRepoV1Search(var_org_sagebionetworks_repo_model_search_query_search_query)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SearchServicesApi-new}{\code{SearchServicesApi$new()}}
\item \href{#method-SearchServicesApi-postRepoV1Search}{\code{SearchServicesApi$postRepoV1Search()}}
\item \href{#method-SearchServicesApi-postRepoV1SearchWithHttpInfo}{\code{SearchServicesApi$postRepoV1SearchWithHttpInfo()}}
\item \href{#method-SearchServicesApi-clone}{\code{SearchServicesApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchServicesApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-SearchServicesApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new SearchServicesApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchServicesApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchServicesApi-postRepoV1Search"></a>}}
\if{latex}{\out{\hypertarget{method-SearchServicesApi-postRepoV1Search}{}}}
\subsection{Method \code{postRepoV1Search()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchServicesApi$postRepoV1Search(
  org_sagebionetworks_repo_model_search_query_search_query,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_search_query_search_query}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelSearchSearchResults
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchServicesApi-postRepoV1SearchWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SearchServicesApi-postRepoV1SearchWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1SearchWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchServicesApi$postRepoV1SearchWithHttpInfo(
  org_sagebionetworks_repo_model_search_query_search_query,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_search_query_search_query}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelSearchSearchResults) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchServicesApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SearchServicesApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchServicesApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
