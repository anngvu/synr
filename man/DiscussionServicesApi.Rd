% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/discussion_services_api.R
\docType{class}
\name{DiscussionServicesApi}
\alias{DiscussionServicesApi}
\title{DiscussionServices operations}
\format{
An \code{R6Class} generator object
}
\description{
DiscussionServicesApi
}
\details{
Synapse REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ deleteRepoV1ReplyReplyId } \emph{  }

\itemize{
\item \emph{ @param } reply_id character


\item status code : 204 | Void


\item response headers :

\tabular{ll}{
}
}

\strong{ deleteRepoV1ThreadThreadId } \emph{  }

\itemize{
\item \emph{ @param } thread_id character


\item status code : 204 | Void


\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1EntityIdThreads } \emph{  }

\itemize{
\item \emph{ @param } limit numeric
\item \emph{ @param } offset numeric
\item \emph{ @param } id character
\item \emph{ @param } sort \link{OrgSagebionetworksRepoModelDiscussionDiscussionThreadOrder}
\item \emph{ @param } ascending character
\item \emph{ @returnType } \link{PaginatedResultsOfDiscussionThreadBundle} \cr


\item status code : 200 | the threads that user has read permission to.

\item return type : PaginatedResultsOfDiscussionThreadBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ForumForumId } \emph{  }

\itemize{
\item \emph{ @param } forum_id character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionForum} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionForum
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ForumForumIdModerators } \emph{  }

\itemize{
\item \emph{ @param } limit numeric
\item \emph{ @param } offset numeric
\item \emph{ @param } forum_id character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelPaginatedIds} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelPaginatedIds
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ForumForumIdThreadcount } \emph{  }

\itemize{
\item \emph{ @param } filter \link{OrgSagebionetworksRepoModelDiscussionDiscussionFilter}
\item \emph{ @param } forum_id character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionThreadCount} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionThreadCount
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ForumForumIdThreads } \emph{  }

\itemize{
\item \emph{ @param } limit numeric
\item \emph{ @param } offset numeric
\item \emph{ @param } filter \link{OrgSagebionetworksRepoModelDiscussionDiscussionFilter}
\item \emph{ @param } forum_id character
\item \emph{ @param } sort \link{OrgSagebionetworksRepoModelDiscussionDiscussionThreadOrder}
\item \emph{ @param } ascending character
\item \emph{ @returnType } \link{PaginatedResultsOfDiscussionThreadBundle} \cr


\item status code : 200 | Auto-generated description

\item return type : PaginatedResultsOfDiscussionThreadBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ProjectProjectIdForum } \emph{  }

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionForum} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionForum
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ReplyMessageUrl } \emph{  }

\itemize{
\item \emph{ @param } message_key character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionMessageURL} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionMessageURL
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ReplyReplyId } \emph{  }

\itemize{
\item \emph{ @param } reply_id character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ThreadMessageUrl } \emph{  }

\itemize{
\item \emph{ @param } message_key character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionMessageURL} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionMessageURL
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ThreadThreadId } \emph{  }

\itemize{
\item \emph{ @param } thread_id character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ThreadThreadIdReplies } \emph{  }

\itemize{
\item \emph{ @param } limit numeric
\item \emph{ @param } offset numeric
\item \emph{ @param } filter \link{OrgSagebionetworksRepoModelDiscussionDiscussionFilter}
\item \emph{ @param } thread_id character
\item \emph{ @param } sort \link{OrgSagebionetworksRepoModelDiscussionDiscussionReplyOrder}
\item \emph{ @param } ascending character
\item \emph{ @returnType } \link{PaginatedResultsOfDiscussionReplyBundle} \cr


\item status code : 200 | Auto-generated description

\item return type : PaginatedResultsOfDiscussionReplyBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ getRepoV1ThreadThreadIdReplycount } \emph{  }

\itemize{
\item \emph{ @param } filter \link{OrgSagebionetworksRepoModelDiscussionDiscussionFilter}
\item \emph{ @param } thread_id character
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionReplyCount} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionReplyCount
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1EntityThreadcounts } \emph{  }

\itemize{
\item \emph{ @param } org_sagebionetworks_repo_model_entity_id_list \link{OrgSagebionetworksRepoModelEntityIdList}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionEntityThreadCounts} \cr


\item status code : 200 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionEntityThreadCounts
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1ForumForumIdSearch } \emph{  }

\itemize{
\item \emph{ @param } forum_id character
\item \emph{ @param } org_sagebionetworks_repo_model_discussion_discussion_search_request \link{OrgSagebionetworksRepoModelDiscussionDiscussionSearchRequest}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionDiscussionSearchResponse} \cr


\item status code : 200 | The response containing a page of results ordered by relevance and a potential token to fetch the results for a subsequent page

\item return type : OrgSagebionetworksRepoModelDiscussionDiscussionSearchResponse
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1Reply } \emph{  }

\itemize{
\item \emph{ @param } org_sagebionetworks_repo_model_discussion_create_discussion_reply \link{OrgSagebionetworksRepoModelDiscussionCreateDiscussionReply}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ postRepoV1Thread } \emph{  }

\itemize{
\item \emph{ @param } org_sagebionetworks_repo_model_discussion_create_discussion_thread \link{OrgSagebionetworksRepoModelDiscussionCreateDiscussionThread}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ putRepoV1ReplyReplyIdMessage } \emph{  }

\itemize{
\item \emph{ @param } reply_id character
\item \emph{ @param } org_sagebionetworks_repo_model_discussion_update_reply_message \link{OrgSagebionetworksRepoModelDiscussionUpdateReplyMessage}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ putRepoV1ThreadThreadIdMessage } \emph{  }

\itemize{
\item \emph{ @param } thread_id character
\item \emph{ @param } org_sagebionetworks_repo_model_discussion_update_thread_message \link{OrgSagebionetworksRepoModelDiscussionUpdateThreadMessage}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ putRepoV1ThreadThreadIdPin } \emph{  }

\itemize{
\item \emph{ @param } thread_id character


\item status code : 204 | Void


\item response headers :

\tabular{ll}{
}
}

\strong{ putRepoV1ThreadThreadIdRestore } \emph{  }

\itemize{
\item \emph{ @param } thread_id character


\item status code : 200 | Void


\item response headers :

\tabular{ll}{
}
}

\strong{ putRepoV1ThreadThreadIdTitle } \emph{  }

\itemize{
\item \emph{ @param } thread_id character
\item \emph{ @param } org_sagebionetworks_repo_model_discussion_update_thread_title \link{OrgSagebionetworksRepoModelDiscussionUpdateThreadTitle}
\item \emph{ @returnType } \link{OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle} \cr


\item status code : 201 | Auto-generated description

\item return type : OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle
\item response headers :

\tabular{ll}{
}
}

\strong{ putRepoV1ThreadThreadIdUnpin } \emph{  }

\itemize{
\item \emph{ @param } thread_id character


\item status code : 204 | Void


\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  deleteRepoV1ReplyReplyId  ####################

library(synr)
var_reply_id <- "reply_id_example" # character | - the ID of the reply being marked as deleted

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

api_instance$deleteRepoV1ReplyReplyId(var_reply_id)


####################  deleteRepoV1ThreadThreadId  ####################

library(synr)
var_thread_id <- "thread_id_example" # character | - the ID of the thread being marked as deleted

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

api_instance$deleteRepoV1ThreadThreadId(var_thread_id)


####################  getRepoV1EntityIdThreads  ####################

library(synr)
var_limit <- 3.4 # numeric | - Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 20.
var_offset <- 3.4 # numeric | - The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.
var_id <- "id_example" # character | - The request entityId
var_sort <- org.sagebionetworks.repo.model.discussion.DiscussionThreadOrder$new() # OrgSagebionetworksRepoModelDiscussionDiscussionThreadOrder | - The field to sort the resulting threads on. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionThreadOrder}\">,DiscussionThreadOrder,</a>,. (Optional)
var_ascending <- "ascending_example" # character | - The direction of sort: true for ascending, and false for descending (Optional)

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1EntityIdThreads(var_limit, var_offset, var_id, sort = var_sort, ascending = var_ascendingdata_file = "result.txt")
result <- api_instance$getRepoV1EntityIdThreads(var_limit, var_offset, var_id, sort = var_sort, ascending = var_ascending)
dput(result)


####################  getRepoV1ForumForumId  ####################

library(synr)
var_forum_id <- "forum_id_example" # character | - The ID of the forum.

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ForumForumId(var_forum_iddata_file = "result.txt")
result <- api_instance$getRepoV1ForumForumId(var_forum_id)
dput(result)


####################  getRepoV1ForumForumIdModerators  ####################

library(synr)
var_limit <- 3.4 # numeric | - Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 100.
var_offset <- 3.4 # numeric | - The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.
var_forum_id <- "forum_id_example" # character | - The forum ID to which the returning mederators belong

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ForumForumIdModerators(var_limit, var_offset, var_forum_iddata_file = "result.txt")
result <- api_instance$getRepoV1ForumForumIdModerators(var_limit, var_offset, var_forum_id)
dput(result)


####################  getRepoV1ForumForumIdThreadcount  ####################

library(synr)
var_filter <- org.sagebionetworks.repo.model.discussion.DiscussionFilter$new() # OrgSagebionetworksRepoModelDiscussionDiscussionFilter | - Filter deleted/ not deleted threads. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.
var_forum_id <- "forum_id_example" # character | - The forum ID to which the returning threads belong

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ForumForumIdThreadcount(var_filter, var_forum_iddata_file = "result.txt")
result <- api_instance$getRepoV1ForumForumIdThreadcount(var_filter, var_forum_id)
dput(result)


####################  getRepoV1ForumForumIdThreads  ####################

library(synr)
var_limit <- 3.4 # numeric | - Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 20.
var_offset <- 3.4 # numeric | - The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.
var_filter <- org.sagebionetworks.repo.model.discussion.DiscussionFilter$new() # OrgSagebionetworksRepoModelDiscussionDiscussionFilter | - Filter deleted/ not deleted threads. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.
var_forum_id <- "forum_id_example" # character | - The forum ID to which the returning threads belong
var_sort <- org.sagebionetworks.repo.model.discussion.DiscussionThreadOrder$new() # OrgSagebionetworksRepoModelDiscussionDiscussionThreadOrder | - The field to sort the resulting threads on. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionThreadOrder}\">,DiscussionThreadOrder,</a>,. (Optional)
var_ascending <- "ascending_example" # character | - The direction of sort: true for ascending, and false for descending (Optional)

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ForumForumIdThreads(var_limit, var_offset, var_filter, var_forum_id, sort = var_sort, ascending = var_ascendingdata_file = "result.txt")
result <- api_instance$getRepoV1ForumForumIdThreads(var_limit, var_offset, var_filter, var_forum_id, sort = var_sort, ascending = var_ascending)
dput(result)


####################  getRepoV1ProjectProjectIdForum  ####################

library(synr)
var_project_id <- "project_id_example" # character | - The ID of the project to which the forum belongs.

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ProjectProjectIdForum(var_project_iddata_file = "result.txt")
result <- api_instance$getRepoV1ProjectProjectIdForum(var_project_id)
dput(result)


####################  getRepoV1ReplyMessageUrl  ####################

library(synr)
var_message_key <- "message_key_example" # character | - DiscussionReplyBundle.messageKey

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ReplyMessageUrl(var_message_keydata_file = "result.txt")
result <- api_instance$getRepoV1ReplyMessageUrl(var_message_key)
dput(result)


####################  getRepoV1ReplyReplyId  ####################

library(synr)
var_reply_id <- "reply_id_example" # character | - The ID of the reply being requested

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ReplyReplyId(var_reply_iddata_file = "result.txt")
result <- api_instance$getRepoV1ReplyReplyId(var_reply_id)
dput(result)


####################  getRepoV1ThreadMessageUrl  ####################

library(synr)
var_message_key <- "message_key_example" # character | 

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ThreadMessageUrl(var_message_keydata_file = "result.txt")
result <- api_instance$getRepoV1ThreadMessageUrl(var_message_key)
dput(result)


####################  getRepoV1ThreadThreadId  ####################

library(synr)
var_thread_id <- "thread_id_example" # character | - The ID of the thread being requested

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ThreadThreadId(var_thread_iddata_file = "result.txt")
result <- api_instance$getRepoV1ThreadThreadId(var_thread_id)
dput(result)


####################  getRepoV1ThreadThreadIdReplies  ####################

library(synr)
var_limit <- 3.4 # numeric | - Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 100.
var_offset <- 3.4 # numeric | - The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.
var_filter <- org.sagebionetworks.repo.model.discussion.DiscussionFilter$new() # OrgSagebionetworksRepoModelDiscussionDiscussionFilter | - Filter deleted/ not deleted replies. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.
var_thread_id <- "thread_id_example" # character | - The thread ID to which the returning replies belong
var_sort <- org.sagebionetworks.repo.model.discussion.DiscussionReplyOrder$new() # OrgSagebionetworksRepoModelDiscussionDiscussionReplyOrder | - The field to sort the resulting replies on. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionReplyOrder}\">,DiscussionReplyOrder,</a>,. (Optional)
var_ascending <- "ascending_example" # character | - The direction of sort: true for ascending, and false for descending (Optional)

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ThreadThreadIdReplies(var_limit, var_offset, var_filter, var_thread_id, sort = var_sort, ascending = var_ascendingdata_file = "result.txt")
result <- api_instance$getRepoV1ThreadThreadIdReplies(var_limit, var_offset, var_filter, var_thread_id, sort = var_sort, ascending = var_ascending)
dput(result)


####################  getRepoV1ThreadThreadIdReplycount  ####################

library(synr)
var_filter <- org.sagebionetworks.repo.model.discussion.DiscussionFilter$new() # OrgSagebionetworksRepoModelDiscussionDiscussionFilter | - Filter deleted/ not deleted replies. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.
var_thread_id <- "thread_id_example" # character | - The thread ID to which the returning replies belong

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$getRepoV1ThreadThreadIdReplycount(var_filter, var_thread_iddata_file = "result.txt")
result <- api_instance$getRepoV1ThreadThreadIdReplycount(var_filter, var_thread_id)
dput(result)


####################  postRepoV1EntityThreadcounts  ####################

library(synr)
var_org_sagebionetworks_repo_model_entity_id_list <- org.sagebionetworks.repo.model.EntityIdList$new(c("idList_example")) # OrgSagebionetworksRepoModelEntityIdList | 

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1EntityThreadcounts(var_org_sagebionetworks_repo_model_entity_id_listdata_file = "result.txt")
result <- api_instance$postRepoV1EntityThreadcounts(var_org_sagebionetworks_repo_model_entity_id_list)
dput(result)


####################  postRepoV1ForumForumIdSearch  ####################

library(synr)
var_forum_id <- "forum_id_example" # character | The ID of the forum where the search is performed
var_org_sagebionetworks_repo_model_discussion_discussion_search_request <- org.sagebionetworks.repo.model.discussion.DiscussionSearchRequest$new("searchString_example", "nextPageToken_example") # OrgSagebionetworksRepoModelDiscussionDiscussionSearchRequest | 

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1ForumForumIdSearch(var_forum_id, var_org_sagebionetworks_repo_model_discussion_discussion_search_requestdata_file = "result.txt")
result <- api_instance$postRepoV1ForumForumIdSearch(var_forum_id, var_org_sagebionetworks_repo_model_discussion_discussion_search_request)
dput(result)


####################  postRepoV1Reply  ####################

library(synr)
var_org_sagebionetworks_repo_model_discussion_create_discussion_reply <- org.sagebionetworks.repo.model.discussion.CreateDiscussionReply$new("threadId_example", "messageMarkdown_example") # OrgSagebionetworksRepoModelDiscussionCreateDiscussionReply | 

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1Reply(var_org_sagebionetworks_repo_model_discussion_create_discussion_replydata_file = "result.txt")
result <- api_instance$postRepoV1Reply(var_org_sagebionetworks_repo_model_discussion_create_discussion_reply)
dput(result)


####################  postRepoV1Thread  ####################

library(synr)
var_org_sagebionetworks_repo_model_discussion_create_discussion_thread <- org.sagebionetworks.repo.model.discussion.CreateDiscussionThread$new("forumId_example", "title_example", "messageMarkdown_example") # OrgSagebionetworksRepoModelDiscussionCreateDiscussionThread | 

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$postRepoV1Thread(var_org_sagebionetworks_repo_model_discussion_create_discussion_threaddata_file = "result.txt")
result <- api_instance$postRepoV1Thread(var_org_sagebionetworks_repo_model_discussion_create_discussion_thread)
dput(result)


####################  putRepoV1ReplyReplyIdMessage  ####################

library(synr)
var_reply_id <- "reply_id_example" # character | - The ID of the reply being updated
var_org_sagebionetworks_repo_model_discussion_update_reply_message <- org.sagebionetworks.repo.model.discussion.UpdateReplyMessage$new("messageMarkdown_example") # OrgSagebionetworksRepoModelDiscussionUpdateReplyMessage | 

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$putRepoV1ReplyReplyIdMessage(var_reply_id, var_org_sagebionetworks_repo_model_discussion_update_reply_messagedata_file = "result.txt")
result <- api_instance$putRepoV1ReplyReplyIdMessage(var_reply_id, var_org_sagebionetworks_repo_model_discussion_update_reply_message)
dput(result)


####################  putRepoV1ThreadThreadIdMessage  ####################

library(synr)
var_thread_id <- "thread_id_example" # character | - The ID of the thread being updated
var_org_sagebionetworks_repo_model_discussion_update_thread_message <- org.sagebionetworks.repo.model.discussion.UpdateThreadMessage$new("messageMarkdown_example") # OrgSagebionetworksRepoModelDiscussionUpdateThreadMessage | 

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$putRepoV1ThreadThreadIdMessage(var_thread_id, var_org_sagebionetworks_repo_model_discussion_update_thread_messagedata_file = "result.txt")
result <- api_instance$putRepoV1ThreadThreadIdMessage(var_thread_id, var_org_sagebionetworks_repo_model_discussion_update_thread_message)
dput(result)


####################  putRepoV1ThreadThreadIdPin  ####################

library(synr)
var_thread_id <- "thread_id_example" # character | - the ID of the thread being marked as pinned

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

api_instance$putRepoV1ThreadThreadIdPin(var_thread_id)


####################  putRepoV1ThreadThreadIdRestore  ####################

library(synr)
var_thread_id <- "thread_id_example" # character | - the ID of the thread that was marked as deleted

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

api_instance$putRepoV1ThreadThreadIdRestore(var_thread_id)


####################  putRepoV1ThreadThreadIdTitle  ####################

library(synr)
var_thread_id <- "thread_id_example" # character | - The ID of the thread being updated
var_org_sagebionetworks_repo_model_discussion_update_thread_title <- org.sagebionetworks.repo.model.discussion.UpdateThreadTitle$new("title_example") # OrgSagebionetworksRepoModelDiscussionUpdateThreadTitle | 

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$putRepoV1ThreadThreadIdTitle(var_thread_id, var_org_sagebionetworks_repo_model_discussion_update_thread_titledata_file = "result.txt")
result <- api_instance$putRepoV1ThreadThreadIdTitle(var_thread_id, var_org_sagebionetworks_repo_model_discussion_update_thread_title)
dput(result)


####################  putRepoV1ThreadThreadIdUnpin  ####################

library(synr)
var_thread_id <- "thread_id_example" # character | - the ID of the thread being unpinned

api_instance <- DiscussionServicesApi$new()

# Configure HTTP bearer authorization: bearerAuth
api_instance$api_client$bearer_token <- Sys.getenv("BEARER_TOKEN")

api_instance$putRepoV1ThreadThreadIdUnpin(var_thread_id)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DiscussionServicesApi-new}{\code{DiscussionServicesApi$new()}}
\item \href{#method-DiscussionServicesApi-deleteRepoV1ReplyReplyId}{\code{DiscussionServicesApi$deleteRepoV1ReplyReplyId()}}
\item \href{#method-DiscussionServicesApi-deleteRepoV1ReplyReplyIdWithHttpInfo}{\code{DiscussionServicesApi$deleteRepoV1ReplyReplyIdWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-deleteRepoV1ThreadThreadId}{\code{DiscussionServicesApi$deleteRepoV1ThreadThreadId()}}
\item \href{#method-DiscussionServicesApi-deleteRepoV1ThreadThreadIdWithHttpInfo}{\code{DiscussionServicesApi$deleteRepoV1ThreadThreadIdWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1EntityIdThreads}{\code{DiscussionServicesApi$getRepoV1EntityIdThreads()}}
\item \href{#method-DiscussionServicesApi-getRepoV1EntityIdThreadsWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1EntityIdThreadsWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ForumForumId}{\code{DiscussionServicesApi$getRepoV1ForumForumId()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ForumForumIdWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ForumForumIdWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ForumForumIdModerators}{\code{DiscussionServicesApi$getRepoV1ForumForumIdModerators()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ForumForumIdModeratorsWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ForumForumIdModeratorsWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ForumForumIdThreadcount}{\code{DiscussionServicesApi$getRepoV1ForumForumIdThreadcount()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ForumForumIdThreadcountWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ForumForumIdThreadcountWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ForumForumIdThreads}{\code{DiscussionServicesApi$getRepoV1ForumForumIdThreads()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ForumForumIdThreadsWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ForumForumIdThreadsWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ProjectProjectIdForum}{\code{DiscussionServicesApi$getRepoV1ProjectProjectIdForum()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ProjectProjectIdForumWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ProjectProjectIdForumWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ReplyMessageUrl}{\code{DiscussionServicesApi$getRepoV1ReplyMessageUrl()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ReplyMessageUrlWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ReplyMessageUrlWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ReplyReplyId}{\code{DiscussionServicesApi$getRepoV1ReplyReplyId()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ReplyReplyIdWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ReplyReplyIdWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ThreadMessageUrl}{\code{DiscussionServicesApi$getRepoV1ThreadMessageUrl()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ThreadMessageUrlWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ThreadMessageUrlWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ThreadThreadId}{\code{DiscussionServicesApi$getRepoV1ThreadThreadId()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ThreadThreadIdWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ThreadThreadIdWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ThreadThreadIdReplies}{\code{DiscussionServicesApi$getRepoV1ThreadThreadIdReplies()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ThreadThreadIdRepliesWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ThreadThreadIdRepliesWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ThreadThreadIdReplycount}{\code{DiscussionServicesApi$getRepoV1ThreadThreadIdReplycount()}}
\item \href{#method-DiscussionServicesApi-getRepoV1ThreadThreadIdReplycountWithHttpInfo}{\code{DiscussionServicesApi$getRepoV1ThreadThreadIdReplycountWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-postRepoV1EntityThreadcounts}{\code{DiscussionServicesApi$postRepoV1EntityThreadcounts()}}
\item \href{#method-DiscussionServicesApi-postRepoV1EntityThreadcountsWithHttpInfo}{\code{DiscussionServicesApi$postRepoV1EntityThreadcountsWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-postRepoV1ForumForumIdSearch}{\code{DiscussionServicesApi$postRepoV1ForumForumIdSearch()}}
\item \href{#method-DiscussionServicesApi-postRepoV1ForumForumIdSearchWithHttpInfo}{\code{DiscussionServicesApi$postRepoV1ForumForumIdSearchWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-postRepoV1Reply}{\code{DiscussionServicesApi$postRepoV1Reply()}}
\item \href{#method-DiscussionServicesApi-postRepoV1ReplyWithHttpInfo}{\code{DiscussionServicesApi$postRepoV1ReplyWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-postRepoV1Thread}{\code{DiscussionServicesApi$postRepoV1Thread()}}
\item \href{#method-DiscussionServicesApi-postRepoV1ThreadWithHttpInfo}{\code{DiscussionServicesApi$postRepoV1ThreadWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ReplyReplyIdMessage}{\code{DiscussionServicesApi$putRepoV1ReplyReplyIdMessage()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ReplyReplyIdMessageWithHttpInfo}{\code{DiscussionServicesApi$putRepoV1ReplyReplyIdMessageWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ThreadThreadIdMessage}{\code{DiscussionServicesApi$putRepoV1ThreadThreadIdMessage()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ThreadThreadIdMessageWithHttpInfo}{\code{DiscussionServicesApi$putRepoV1ThreadThreadIdMessageWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ThreadThreadIdPin}{\code{DiscussionServicesApi$putRepoV1ThreadThreadIdPin()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ThreadThreadIdPinWithHttpInfo}{\code{DiscussionServicesApi$putRepoV1ThreadThreadIdPinWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ThreadThreadIdRestore}{\code{DiscussionServicesApi$putRepoV1ThreadThreadIdRestore()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ThreadThreadIdRestoreWithHttpInfo}{\code{DiscussionServicesApi$putRepoV1ThreadThreadIdRestoreWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ThreadThreadIdTitle}{\code{DiscussionServicesApi$putRepoV1ThreadThreadIdTitle()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ThreadThreadIdTitleWithHttpInfo}{\code{DiscussionServicesApi$putRepoV1ThreadThreadIdTitleWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ThreadThreadIdUnpin}{\code{DiscussionServicesApi$putRepoV1ThreadThreadIdUnpin()}}
\item \href{#method-DiscussionServicesApi-putRepoV1ThreadThreadIdUnpinWithHttpInfo}{\code{DiscussionServicesApi$putRepoV1ThreadThreadIdUnpinWithHttpInfo()}}
\item \href{#method-DiscussionServicesApi-clone}{\code{DiscussionServicesApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new DiscussionServicesApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-deleteRepoV1ReplyReplyId"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-deleteRepoV1ReplyReplyId}{}}}
\subsection{Method \code{deleteRepoV1ReplyReplyId()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$deleteRepoV1ReplyReplyId(reply_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reply_id}}{- the ID of the reply being marked as deleted}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-deleteRepoV1ReplyReplyIdWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-deleteRepoV1ReplyReplyIdWithHttpInfo}{}}}
\subsection{Method \code{deleteRepoV1ReplyReplyIdWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$deleteRepoV1ReplyReplyIdWithHttpInfo(reply_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reply_id}}{- the ID of the reply being marked as deleted}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-deleteRepoV1ThreadThreadId"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-deleteRepoV1ThreadThreadId}{}}}
\subsection{Method \code{deleteRepoV1ThreadThreadId()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$deleteRepoV1ThreadThreadId(thread_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- the ID of the thread being marked as deleted}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-deleteRepoV1ThreadThreadIdWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-deleteRepoV1ThreadThreadIdWithHttpInfo}{}}}
\subsection{Method \code{deleteRepoV1ThreadThreadIdWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$deleteRepoV1ThreadThreadIdWithHttpInfo(thread_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- the ID of the thread being marked as deleted}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1EntityIdThreads"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1EntityIdThreads}{}}}
\subsection{Method \code{getRepoV1EntityIdThreads()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1EntityIdThreads(
  limit,
  offset,
  id,
  sort = NULL,
  ascending = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{- Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 20.}

\item{\code{offset}}{- The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.}

\item{\code{id}}{- The request entityId}

\item{\code{sort}}{(optional) - The field to sort the resulting threads on. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionThreadOrder}\">,DiscussionThreadOrder,</a>,.}

\item{\code{ascending}}{(optional) - The direction of sort: true for ascending, and false for descending}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResultsOfDiscussionThreadBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1EntityIdThreadsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1EntityIdThreadsWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1EntityIdThreadsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1EntityIdThreadsWithHttpInfo(
  limit,
  offset,
  id,
  sort = NULL,
  ascending = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{- Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 20.}

\item{\code{offset}}{- The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.}

\item{\code{id}}{- The request entityId}

\item{\code{sort}}{(optional) - The field to sort the resulting threads on. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionThreadOrder}\">,DiscussionThreadOrder,</a>,.}

\item{\code{ascending}}{(optional) - The direction of sort: true for ascending, and false for descending}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResultsOfDiscussionThreadBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ForumForumId"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ForumForumId}{}}}
\subsection{Method \code{getRepoV1ForumForumId()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ForumForumId(forum_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{forum_id}}{- The ID of the forum.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionForum
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ForumForumIdWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ForumForumIdWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ForumForumIdWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ForumForumIdWithHttpInfo(
  forum_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{forum_id}}{- The ID of the forum.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionForum) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ForumForumIdModerators"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ForumForumIdModerators}{}}}
\subsection{Method \code{getRepoV1ForumForumIdModerators()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ForumForumIdModerators(
  limit,
  offset,
  forum_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{- Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 100.}

\item{\code{offset}}{- The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.}

\item{\code{forum_id}}{- The forum ID to which the returning mederators belong}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelPaginatedIds
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ForumForumIdModeratorsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ForumForumIdModeratorsWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ForumForumIdModeratorsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ForumForumIdModeratorsWithHttpInfo(
  limit,
  offset,
  forum_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{- Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 100.}

\item{\code{offset}}{- The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.}

\item{\code{forum_id}}{- The forum ID to which the returning mederators belong}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelPaginatedIds) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ForumForumIdThreadcount"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ForumForumIdThreadcount}{}}}
\subsection{Method \code{getRepoV1ForumForumIdThreadcount()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ForumForumIdThreadcount(
  filter,
  forum_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{- Filter deleted/ not deleted threads. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.}

\item{\code{forum_id}}{- The forum ID to which the returning threads belong}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionThreadCount
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ForumForumIdThreadcountWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ForumForumIdThreadcountWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ForumForumIdThreadcountWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ForumForumIdThreadcountWithHttpInfo(
  filter,
  forum_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{- Filter deleted/ not deleted threads. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.}

\item{\code{forum_id}}{- The forum ID to which the returning threads belong}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionThreadCount) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ForumForumIdThreads"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ForumForumIdThreads}{}}}
\subsection{Method \code{getRepoV1ForumForumIdThreads()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ForumForumIdThreads(
  limit,
  offset,
  filter,
  forum_id,
  sort = NULL,
  ascending = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{- Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 20.}

\item{\code{offset}}{- The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.}

\item{\code{filter}}{- Filter deleted/ not deleted threads. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.}

\item{\code{forum_id}}{- The forum ID to which the returning threads belong}

\item{\code{sort}}{(optional) - The field to sort the resulting threads on. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionThreadOrder}\">,DiscussionThreadOrder,</a>,.}

\item{\code{ascending}}{(optional) - The direction of sort: true for ascending, and false for descending}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResultsOfDiscussionThreadBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ForumForumIdThreadsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ForumForumIdThreadsWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ForumForumIdThreadsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ForumForumIdThreadsWithHttpInfo(
  limit,
  offset,
  filter,
  forum_id,
  sort = NULL,
  ascending = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{- Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 20.}

\item{\code{offset}}{- The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.}

\item{\code{filter}}{- Filter deleted/ not deleted threads. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.}

\item{\code{forum_id}}{- The forum ID to which the returning threads belong}

\item{\code{sort}}{(optional) - The field to sort the resulting threads on. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionThreadOrder}\">,DiscussionThreadOrder,</a>,.}

\item{\code{ascending}}{(optional) - The direction of sort: true for ascending, and false for descending}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResultsOfDiscussionThreadBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ProjectProjectIdForum"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ProjectProjectIdForum}{}}}
\subsection{Method \code{getRepoV1ProjectProjectIdForum()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ProjectProjectIdForum(
  project_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{- The ID of the project to which the forum belongs.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionForum
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ProjectProjectIdForumWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ProjectProjectIdForumWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ProjectProjectIdForumWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ProjectProjectIdForumWithHttpInfo(
  project_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{- The ID of the project to which the forum belongs.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionForum) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ReplyMessageUrl"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ReplyMessageUrl}{}}}
\subsection{Method \code{getRepoV1ReplyMessageUrl()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ReplyMessageUrl(
  message_key,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message_key}}{- DiscussionReplyBundle.messageKey}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionMessageURL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ReplyMessageUrlWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ReplyMessageUrlWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ReplyMessageUrlWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ReplyMessageUrlWithHttpInfo(
  message_key,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message_key}}{- DiscussionReplyBundle.messageKey}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionMessageURL) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ReplyReplyId"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ReplyReplyId}{}}}
\subsection{Method \code{getRepoV1ReplyReplyId()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ReplyReplyId(reply_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reply_id}}{- The ID of the reply being requested}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ReplyReplyIdWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ReplyReplyIdWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ReplyReplyIdWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ReplyReplyIdWithHttpInfo(
  reply_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reply_id}}{- The ID of the reply being requested}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ThreadMessageUrl"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ThreadMessageUrl}{}}}
\subsection{Method \code{getRepoV1ThreadMessageUrl()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ThreadMessageUrl(
  message_key,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message_key}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionMessageURL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ThreadMessageUrlWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ThreadMessageUrlWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ThreadMessageUrlWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ThreadMessageUrlWithHttpInfo(
  message_key,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message_key}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionMessageURL) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ThreadThreadId"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ThreadThreadId}{}}}
\subsection{Method \code{getRepoV1ThreadThreadId()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ThreadThreadId(thread_id, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- The ID of the thread being requested}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ThreadThreadIdWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ThreadThreadIdWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ThreadThreadIdWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ThreadThreadIdWithHttpInfo(
  thread_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- The ID of the thread being requested}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ThreadThreadIdReplies"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ThreadThreadIdReplies}{}}}
\subsection{Method \code{getRepoV1ThreadThreadIdReplies()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ThreadThreadIdReplies(
  limit,
  offset,
  filter,
  thread_id,
  sort = NULL,
  ascending = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{- Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 100.}

\item{\code{offset}}{- The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.}

\item{\code{filter}}{- Filter deleted/ not deleted replies. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.}

\item{\code{thread_id}}{- The thread ID to which the returning replies belong}

\item{\code{sort}}{(optional) - The field to sort the resulting replies on. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionReplyOrder}\">,DiscussionReplyOrder,</a>,.}

\item{\code{ascending}}{(optional) - The direction of sort: true for ascending, and false for descending}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResultsOfDiscussionReplyBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ThreadThreadIdRepliesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ThreadThreadIdRepliesWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ThreadThreadIdRepliesWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ThreadThreadIdRepliesWithHttpInfo(
  limit,
  offset,
  filter,
  thread_id,
  sort = NULL,
  ascending = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{- Limits the size of the page returned. For example, a page size of 10 require limit = 10. The maximum Limit for this call is 100.}

\item{\code{offset}}{- The index of the pagination offset. For a page size of 10, the first page would be at offset = 0, and the second page would be at offset = 10.}

\item{\code{filter}}{- Filter deleted/ not deleted replies. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.}

\item{\code{thread_id}}{- The thread ID to which the returning replies belong}

\item{\code{sort}}{(optional) - The field to sort the resulting replies on. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionReplyOrder}\">,DiscussionReplyOrder,</a>,.}

\item{\code{ascending}}{(optional) - The direction of sort: true for ascending, and false for descending}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResultsOfDiscussionReplyBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ThreadThreadIdReplycount"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ThreadThreadIdReplycount}{}}}
\subsection{Method \code{getRepoV1ThreadThreadIdReplycount()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ThreadThreadIdReplycount(
  filter,
  thread_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{- Filter deleted/ not deleted replies. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.}

\item{\code{thread_id}}{- The thread ID to which the returning replies belong}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionReplyCount
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-getRepoV1ThreadThreadIdReplycountWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-getRepoV1ThreadThreadIdReplycountWithHttpInfo}{}}}
\subsection{Method \code{getRepoV1ThreadThreadIdReplycountWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$getRepoV1ThreadThreadIdReplycountWithHttpInfo(
  filter,
  thread_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{- Filter deleted/ not deleted replies. Available options: ,<a href=\"${org.sagebionetworks.repo.model.discussion.DiscussionFilter}\">,DiscussionFilter,</a>,.}

\item{\code{thread_id}}{- The thread ID to which the returning replies belong}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionReplyCount) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-postRepoV1EntityThreadcounts"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-postRepoV1EntityThreadcounts}{}}}
\subsection{Method \code{postRepoV1EntityThreadcounts()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$postRepoV1EntityThreadcounts(
  org_sagebionetworks_repo_model_entity_id_list,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_entity_id_list}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionEntityThreadCounts
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-postRepoV1EntityThreadcountsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-postRepoV1EntityThreadcountsWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1EntityThreadcountsWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$postRepoV1EntityThreadcountsWithHttpInfo(
  org_sagebionetworks_repo_model_entity_id_list,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_entity_id_list}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionEntityThreadCounts) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-postRepoV1ForumForumIdSearch"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-postRepoV1ForumForumIdSearch}{}}}
\subsection{Method \code{postRepoV1ForumForumIdSearch()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$postRepoV1ForumForumIdSearch(
  forum_id,
  org_sagebionetworks_repo_model_discussion_discussion_search_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{forum_id}}{The ID of the forum where the search is performed}

\item{\code{org_sagebionetworks_repo_model_discussion_discussion_search_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionDiscussionSearchResponse
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-postRepoV1ForumForumIdSearchWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-postRepoV1ForumForumIdSearchWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1ForumForumIdSearchWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$postRepoV1ForumForumIdSearchWithHttpInfo(
  forum_id,
  org_sagebionetworks_repo_model_discussion_discussion_search_request,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{forum_id}}{The ID of the forum where the search is performed}

\item{\code{org_sagebionetworks_repo_model_discussion_discussion_search_request}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionDiscussionSearchResponse) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-postRepoV1Reply"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-postRepoV1Reply}{}}}
\subsection{Method \code{postRepoV1Reply()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$postRepoV1Reply(
  org_sagebionetworks_repo_model_discussion_create_discussion_reply,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_discussion_create_discussion_reply}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-postRepoV1ReplyWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-postRepoV1ReplyWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1ReplyWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$postRepoV1ReplyWithHttpInfo(
  org_sagebionetworks_repo_model_discussion_create_discussion_reply,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_discussion_create_discussion_reply}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-postRepoV1Thread"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-postRepoV1Thread}{}}}
\subsection{Method \code{postRepoV1Thread()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$postRepoV1Thread(
  org_sagebionetworks_repo_model_discussion_create_discussion_thread,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_discussion_create_discussion_thread}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-postRepoV1ThreadWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-postRepoV1ThreadWithHttpInfo}{}}}
\subsection{Method \code{postRepoV1ThreadWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$postRepoV1ThreadWithHttpInfo(
  org_sagebionetworks_repo_model_discussion_create_discussion_thread,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{org_sagebionetworks_repo_model_discussion_create_discussion_thread}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ReplyReplyIdMessage"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ReplyReplyIdMessage}{}}}
\subsection{Method \code{putRepoV1ReplyReplyIdMessage()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ReplyReplyIdMessage(
  reply_id,
  org_sagebionetworks_repo_model_discussion_update_reply_message,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reply_id}}{- The ID of the reply being updated}

\item{\code{org_sagebionetworks_repo_model_discussion_update_reply_message}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ReplyReplyIdMessageWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ReplyReplyIdMessageWithHttpInfo}{}}}
\subsection{Method \code{putRepoV1ReplyReplyIdMessageWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ReplyReplyIdMessageWithHttpInfo(
  reply_id,
  org_sagebionetworks_repo_model_discussion_update_reply_message,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reply_id}}{- The ID of the reply being updated}

\item{\code{org_sagebionetworks_repo_model_discussion_update_reply_message}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionDiscussionReplyBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ThreadThreadIdMessage"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ThreadThreadIdMessage}{}}}
\subsection{Method \code{putRepoV1ThreadThreadIdMessage()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ThreadThreadIdMessage(
  thread_id,
  org_sagebionetworks_repo_model_discussion_update_thread_message,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- The ID of the thread being updated}

\item{\code{org_sagebionetworks_repo_model_discussion_update_thread_message}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ThreadThreadIdMessageWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ThreadThreadIdMessageWithHttpInfo}{}}}
\subsection{Method \code{putRepoV1ThreadThreadIdMessageWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ThreadThreadIdMessageWithHttpInfo(
  thread_id,
  org_sagebionetworks_repo_model_discussion_update_thread_message,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- The ID of the thread being updated}

\item{\code{org_sagebionetworks_repo_model_discussion_update_thread_message}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ThreadThreadIdPin"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ThreadThreadIdPin}{}}}
\subsection{Method \code{putRepoV1ThreadThreadIdPin()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ThreadThreadIdPin(thread_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- the ID of the thread being marked as pinned}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ThreadThreadIdPinWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ThreadThreadIdPinWithHttpInfo}{}}}
\subsection{Method \code{putRepoV1ThreadThreadIdPinWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ThreadThreadIdPinWithHttpInfo(thread_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- the ID of the thread being marked as pinned}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ThreadThreadIdRestore"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ThreadThreadIdRestore}{}}}
\subsection{Method \code{putRepoV1ThreadThreadIdRestore()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ThreadThreadIdRestore(thread_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- the ID of the thread that was marked as deleted}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ThreadThreadIdRestoreWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ThreadThreadIdRestoreWithHttpInfo}{}}}
\subsection{Method \code{putRepoV1ThreadThreadIdRestoreWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ThreadThreadIdRestoreWithHttpInfo(
  thread_id,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- the ID of the thread that was marked as deleted}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ThreadThreadIdTitle"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ThreadThreadIdTitle}{}}}
\subsection{Method \code{putRepoV1ThreadThreadIdTitle()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ThreadThreadIdTitle(
  thread_id,
  org_sagebionetworks_repo_model_discussion_update_thread_title,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- The ID of the thread being updated}

\item{\code{org_sagebionetworks_repo_model_discussion_update_thread_title}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ThreadThreadIdTitleWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ThreadThreadIdTitleWithHttpInfo}{}}}
\subsection{Method \code{putRepoV1ThreadThreadIdTitleWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ThreadThreadIdTitleWithHttpInfo(
  thread_id,
  org_sagebionetworks_repo_model_discussion_update_thread_title,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- The ID of the thread being updated}

\item{\code{org_sagebionetworks_repo_model_discussion_update_thread_title}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (OrgSagebionetworksRepoModelDiscussionDiscussionThreadBundle) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ThreadThreadIdUnpin"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ThreadThreadIdUnpin}{}}}
\subsection{Method \code{putRepoV1ThreadThreadIdUnpin()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ThreadThreadIdUnpin(thread_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- the ID of the thread being unpinned}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-putRepoV1ThreadThreadIdUnpinWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-putRepoV1ThreadThreadIdUnpinWithHttpInfo}{}}}
\subsection{Method \code{putRepoV1ThreadThreadIdUnpinWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$putRepoV1ThreadThreadIdUnpinWithHttpInfo(thread_id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{- the ID of the thread being unpinned}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DiscussionServicesApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DiscussionServicesApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DiscussionServicesApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
